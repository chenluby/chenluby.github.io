<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ELK的实践-Logstash</title>
    <url>/archives/b3498bf7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Logstash安装和解析SpringBoot项目日志。</p>
          </div> 

<a id="more"></a>

<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><div class="note warning no-icon">
            <ul><li>Window:10 </li><li>Java version:1.8.0_201</li><li>Elasticsearch: 7.4.0</li><li>Kibana:7.4.0</li><li>Logstash:7.4.0</li><li>SpringBoot:2.2.5.RELEASE</li></ul>
          </div>

<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><ul>
<li>下面是官网地址</li>
</ul>
<blockquote>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/logstash-7-4-0" target="_blank" rel="noopener">Logstash下载地址:</a></p>
</blockquote>
<ul>
<li>下面是百度云的下载地址</li>
</ul>
<blockquote>
<p><a href="https://pan.baidu.com/s/17P4N1Upl8EinGNdrAXgKAw" target="_blank" rel="noopener">logstash-7.4.0</a></p>
<p>提取码: chen</p>
</blockquote>
<h5 id="Logstash配置部署"><a href="#Logstash配置部署" class="headerlink" title="Logstash配置部署"></a>Logstash配置部署</h5><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><ul>
<li>解压后在conf文件夹新建<code>logstash-springboot.conf</code>配置文件，内容如下</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  tcp &#123;</span><br><span class="line">    mode =&gt; <span class="string">"server"</span></span><br><span class="line">    host =&gt; <span class="string">"127.0.0.1"</span></span><br><span class="line">    port =&gt; <span class="number">4560</span></span><br><span class="line">    codec =&gt; json_lines</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">    hosts =&gt; <span class="string">"127.0.0.1:9200"</span></span><br><span class="line">    index =&gt; <span class="string">"springboot-logstash-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>以下配置视情况自定义配置</li>
</ul>
<blockquote>
<ol>
<li><code>host</code>是Logstash的访问ip。</li>
<li><code>port</code>是Logstash的访问端口。</li>
<li><code>hosts</code>是Elasticsearch的实例地址。</li>
<li><code>index</code>是日志创建索引名称。</li>
</ol>
</blockquote>
<h6 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h6><ul>
<li>在解压目录的<code>bin</code>文件夹新建一个<code>start.bat</code>启动脚本，可以将脚本发送桌面快捷方式后以后不用每次进入bin目录执行启动命令了，内容如下。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">logstash.bat -f ..&#x2F;config&#x2F;logstash-springboot.conf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：logstash-springboot.conf和上面新建的配置文件名称相同。</p>
</blockquote>
<h6 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h6><p>最后依次启动Elasticsearch<code>==&gt;</code> Kibana <code>==&gt;</code> Logstash。</p>
<ul>
<li>Logstash启动后日志如下，将会看到4560端口等信息。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200411014557.png" alt="Logstash启动日志图"></p>
<ul>
<li>在浏览器打开 <a href="http://localhost:5601/" target="_blank" rel="noopener">Kibana</a> 地址找到如下图的位置依次打开，填好<strong>索引模式</strong>后点击下一步选择<code>@timestamp</code>即可。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200411020000.png" alt="索引模式设置图"></p>
<blockquote>
<p>索引模式的设置说明：<code>springboot-logstash-2020.04.10</code>设置是根据上面的<code>logstash-springboot.conf</code>启动生成的，所以我们为了索引项目不同日期的日志将值改<code>springboot-logstash-*</code>。</p>
</blockquote>
<h5 id="项目集成"><a href="#项目集成" class="headerlink" title="项目集成"></a>项目集成</h5><h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven-wrapper.jar</span><br><span class="line">│          maven-wrapper.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  └─main</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─blog</span><br><span class="line">│      │      └─demo</span><br><span class="line">│      │          │  Demo11Application.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          └─controller</span><br><span class="line">│      │                  TestController.java</span><br><span class="line">│      │</span><br><span class="line">│      └─resources</span><br><span class="line">│              application.yml</span><br><span class="line">│              logback-spring.xml</span><br></pre></td></tr></table></figure>

<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><ul>
<li>下面是项目的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--logback日志依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/net.logstash.logback/logstash-logback-encoder --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>除了项目默认的<em>application.yml</em>  配置文件外，还需要新建一个日志的 <em>logback-spring.xml</em></p>
<ul>
<li><em>application.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8090</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#应用程序的上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br></pre></td></tr></table></figure>

<ul>
<li>logback-spring.xml配置如下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--应用名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"APP_NAME"</span> <span class="attr">value</span>=<span class="string">"demo-11"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志文件保存路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE_PATH"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;&#125;/logs&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_NAME&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--每天记录日志到文件appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE_PATH&#125;/$&#123;APP_NAME&#125;-%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--输出到logstash的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"LOGSTASH"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.appender.LogstashTcpSocketAppender"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--可以访问的logstash日志收集端口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>127.0.0.1:4560<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> <span class="attr">class</span>=<span class="string">"net.logstash.logback.encoder.LogstashEncoder"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"LOGSTASH"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：&lt;destination&gt;的配置要和<code>logstash-springboot.conf</code>配置文件的<code>host</code>和<code>port</code>对应。</p>
</blockquote>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><ul>
<li>新建一个测试TestController类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/4/11. 0:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getLogs"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getLogs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制造被除数为0的异常。</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Logstash测试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>启动成功后访问下面的地址：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:8090&#x2F;blog&#x2F;getLogs</span><br></pre></td></tr></table></figure>

<ul>
<li>回到<code>Kibana</code>访问下图位置，搜索我们日志关键词<code>zero</code>将会提示下面的搜索结果。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200411021725.png" alt="搜索结果图"></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><div class="note info">
            <p><a href="https://juejin.im/post/5d2738a2f265da1bac404299" target="_blank" rel="noopener">SpringBoot应用整合ELK实现日志收集</a></p>
          </div> 

<h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><p>如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-11" target="_blank" rel="noopener">源码链接</a></p>
          </div>]]></content>
      <categories>
        <category>日志分析</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>日志分析</tag>
        <tag>Elasticsearch</tag>
        <tag>ELK</tag>
        <tag>Kibana</tag>
        <tag>SpringBoot</tag>
        <tag>Logstash</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK的实践-Kibana</title>
    <url>/archives/f152cdcf/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>可视化平台Kibana安装使用。</p>
          </div> 

<a id="more"></a>

<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><div class="note warning no-icon">
            <ul><li>Window:10 </li><li>Java version:1.8.0_201</li><li>Elasticsearch: 7.4.0</li><li>Kibana:7.4.0</li></ul>
          </div>

<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><ul>
<li>下面是官网地址</li>
</ul>
<blockquote>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/kibana-7-4-0" target="_blank" rel="noopener">Kibana下载地址:</a></p>
</blockquote>
<ul>
<li>下面是百度云的下载地址</li>
</ul>
<blockquote>
<p><a href="https://pan.baidu.com/s/1Ird1qqDIACjlEM_-cDGjnQ" target="_blank" rel="noopener">Kibana-7.4.0-windows-x86_64</a></p>
<p>提取码: chen</p>
</blockquote>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>将上面的文件解压后，找到<code>config</code>目录下的<code>kibana.yml</code>配置文件，解开对应行数的注释配置。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第2行</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="comment">#第7行</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">"localhost"</span></span><br><span class="line"><span class="comment">#第28行</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">["http://localhost:9200"]</span></span><br><span class="line"><span class="comment">#第37行</span></span><br><span class="line"><span class="attr">kibana.index:</span> <span class="string">".kibana"</span></span><br><span class="line"><span class="comment">#第114行,改为zh-CN</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">"zh-CN"</span></span><br></pre></td></tr></table></figure>

<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>进入到<code>bin</code>目录双击<code>kibana.bat</code>文件，启动访问日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  log   [06:49:20.786] [info][plugins-system] Setting up [4] plugins: [security,translations,inspector,data]</span><br><span class="line">  log   [06:49:20.795] [info][plugins][security] Setting up plugin</span><br><span class="line">  log   [06:49:20.799] [warning][config][plugins][security] Generating a random key for xpack.security.encryptionKey. To prevent sessions from being invalidated on restart, please set xpack.security.encryptionKey in kibana.yml</span><br><span class="line">  log   [06:49:20.801] [warning][config][plugins][security] Session cookies will be transmitted over insecure connections. This is not recommended.</span><br><span class="line">  log   [06:49:20.893] [info][plugins][translations] Setting up plugin</span><br><span class="line">  log   [06:49:20.894] [info][data][plugins] Setting up plugin</span><br><span class="line">  log   [06:49:20.896] [info][plugins-system] Starting [3] plugins: [security,translations,data]</span><br><span class="line">  log   [06:50:22.449] [info][status][plugin:kibana@7.4.0] Status changed from uninitialized to green - Ready</span><br><span class="line">  log   [06:50:22.455] [info][status][plugin:elasticsearch@7.4.0] Status changed from uninitialized to yellow - Waiting for Elasticsearch</span><br><span class="line"> </span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">  log   [06:50:33.672] [info][migrations] Creating index .kibana_task_manager_1.</span><br><span class="line">  log   [06:50:35.024] [info][migrations] Creating index .kibana_1.</span><br><span class="line">  log   [06:50:38.970] [info][migrations] Pointing alias .kibana_task_manager to .kibana_task_manager_1.</span><br><span class="line">  log   [06:50:40.011] [info][migrations] Finished in 6339ms.</span><br><span class="line">  log   [06:50:40.169] [info][migrations] Pointing alias .kibana to .kibana_1.</span><br><span class="line">  log   [06:50:40.353] [info][migrations] Finished in 6687ms.</span><br><span class="line">  log   [06:50:40.360] [info][listening] Server running at http://localhost:5601</span><br><span class="line">  log   [06:50:40.402] [info][server][Kibana][http] http server running at http://localhost:5601</span><br><span class="line">  log   [06:50:48.174] [info][status][plugin:spaces@7.4.0] Status changed from yellow to green - Ready</span><br></pre></td></tr></table></figure>

<ul>
<li>启动成功后能正常访问下面地址即为成功。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:5601&#x2F;</span><br></pre></td></tr></table></figure>

</br>

<blockquote>
<p>注：启动Kibana需要先启动Elasticsearch</p>
</blockquote>
<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p>打开后找到菜单栏倒数第三个，如图示，例如我们想请求统计文档的话，则去掉ip和端口，只保留后面的参数即可，它的完整URL如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XGET &quot;http:&#x2F;&#x2F;localhost:9200&#x2F;_count?pretty&#x3D;true&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200408152109.png" alt="Kibana控制台示例图"></p>
<ul>
<li>所有在这里操作的只需实例地址后面的参数，和ELK的实践-Elasticsearch一文的操作类似，下面整理了一些常规操作，以下操作以索引<code>blog-kibana</code>为例。</li>
</ul>
<h6 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT blog-kibana</span><br></pre></td></tr></table></figure>

<h6 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE blog-kibana</span><br></pre></td></tr></table></figure>

<h6 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _mapping?pretty&#x3D;true</span><br></pre></td></tr></table></figure>

<h6 id="创建mapping"><a href="#创建mapping" class="headerlink" title="创建mapping"></a>创建mapping</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT blog-kibana&#x2F;_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;productName&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;text&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;annual_rate&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;describe&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="修改mapping"><a href="#修改mapping" class="headerlink" title="修改mapping"></a>修改mapping</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT blog-kibana&#x2F;_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;addField&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;text&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST blog-kibana&#x2F;_doc&#x2F;test?pretty</span><br><span class="line">&#123;</span><br><span class="line">    &quot;productName&quot;:&quot;Kibana&quot;,</span><br><span class="line">    &quot;annual_rate&quot;:&quot;3.22%&quot;,</span><br><span class="line">    &quot;describe&quot;:&quot;Kibana&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT blog-kibana&#x2F;_doc&#x2F;test?pretty</span><br><span class="line">&#123;</span><br><span class="line">    &quot;productName&quot;:&quot;Kibanabiu&quot;,</span><br><span class="line">    &quot;annual_rate&quot;:&quot;3.22%&quot;,</span><br><span class="line">    &quot;describe&quot;:&quot;Kibana&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="统计文档"><a href="#统计文档" class="headerlink" title="统计文档"></a>统计文档</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog-kibana&#x2F;_count?pretty&#x3D;true</span><br></pre></td></tr></table></figure>

<h6 id="搜索文档"><a href="#搜索文档" class="headerlink" title="搜索文档"></a>搜索文档</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog-kibana&#x2F;_doc&#x2F;test</span><br></pre></td></tr></table></figure>

<h6 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET blog-kibana&#x2F;_search</span><br></pre></td></tr></table></figure>

<h6 id="查看集群健康"><a href="#查看集群健康" class="headerlink" title="查看集群健康"></a>查看集群健康</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _cat&#x2F;health?v</span><br></pre></td></tr></table></figure>

<h6 id="查看集群索引"><a href="#查看集群索引" class="headerlink" title="查看集群索引"></a>查看集群索引</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _cat&#x2F;indices?v</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>日志分析</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>日志分析</tag>
        <tag>Elasticsearch</tag>
        <tag>ELK</tag>
        <tag>Kibana</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK的实践-IK中文分词</title>
    <url>/archives/b170758d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>IK中文分词器的安装使用。</p>
          </div> 

<a id="more"></a>

<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><div class="note warning no-icon">
            <ul><li>Window:10 </li><li>Java version:1.8.0_201</li><li>Elasticsearch: 7.4.0</li><li>IK：7.4.0</li></ul>
          </div>

<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><ul>
<li>下面是官网地址</li>
</ul>
<blockquote>
<p><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">IK下载地址:</a></p>
</blockquote>
<ul>
<li>下面是百度云的下载地址</li>
</ul>
<blockquote>
<p><a href="https://pan.baidu.com/s/1DIyXHOoFnOZ5xwLWodJMEQ" target="_blank" rel="noopener">Elasticsearch-analysis-ik-7.4.0</a></p>
<p>提取码: chen</p>
</blockquote>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>将上面的文件解压到之前的Elasticsearch-&gt;plugins-&gt;ik目录。<code>ik</code>目录自己新建的。正常启动Elasticsearch如果控制台提示下面字符则成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2020-04-06T18:36:08,311][INFO ][o.e.p.PluginsService     ] [ANT] loaded plugin [analysis-ik]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">[2020-04-06T18:36:24,597][INFO ][o.e.g.GatewayService     ] [ANT] recovered [1] indices into cluster_state</span><br><span class="line">[2020-04-06T18:36:24,841][INFO ][o.w.a.d.Monitor          ] [ANT] try load config from D:\SoftWare\ELK\ElasticSearch\config\analysis-ik\IKAnalyzer.cfg.xml</span><br><span class="line">[2020-04-06T18:36:24,844][INFO ][o.w.a.d.Monitor          ] [ANT] try load config from D:\SoftWare\ELK\ElasticSearch\plugins\ik\config\IKAnalyzer.cfg.xml</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200406154241.png" alt="解压位置和启动图"></p>
<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p><strong>测试效果</strong></p>
<p>请求方式<code>POST</code>，地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;_analyze&#x2F;</span><br></pre></td></tr></table></figure>

<p>数据格式<code>JSON</code>,内容如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"analyzer"</span>:<span class="string">"ik_max_word"</span>,</span><br><span class="line">    <span class="attr">"text"</span>:<span class="string">"我是中国人"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>ik_max_word</code>分词器是插件<code>ik</code>提供的，文本做最细粒度的拆分,可以对文本进行最大数量的分词。</p>
</blockquote>
<p>错误返回结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"error"</span>: &#123;</span><br><span class="line">        <span class="attr">"root_cause"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"remote_transport_exception"</span>,</span><br><span class="line">                <span class="attr">"reason"</span>: <span class="string">"[ANT][127.0.0.1:9300][indices:admin/analyze[s]]"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"illegal_argument_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"failed to find global analyzer [ik_max_word]"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功结果返回如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tokens"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"我"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"是"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_CHAR"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"中国人"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"中国"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"国人"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">4</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</br>

<div class="note info">
            <p>下面是给指定索引的mapping指定分词方式。经测试在HTTP请求中无法生效，后期在Java程序测试效果。</p>
          </div>

</br>

<p><strong>创建索引</strong></p>
<p>先新建一个新索引(Index)随便命名为<code>ik_index</code>,请求方式<code>PUT</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;ik_index</span><br></pre></td></tr></table></figure>

<p><strong>创建mapping</strong></p>
<p>为索引<code>ik_index</code>创建一个mapping,请求方式为<code>POST</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;ik_index&#x2F;_mapping</span><br></pre></td></tr></table></figure>

<p>数据格式为<code>JSON</code>，content为字段名。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="attr">"properties"</span>: &#123;</span><br><span class="line">            <span class="attr">"content"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">                <span class="attr">"search_analyzer"</span>: <span class="string">"ik_smart"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>analyzer</code>是字段文本的分词器。</p>
<p><code>search_analyzer</code>是搜索词的分词器。</p>
<p><code>ik_max_word</code>分词器是插件<code>ik</code>提供的，文本做最细粒度的拆分,可以对文本进行最大数量的分词。</p>
<p><code>ik_smart</code>会做最粗粒度的拆分.</p>
<p><strong>创建文档数据</strong></p>
<p>为索引添加文档<code>test</code>,请求格式为<code>POST</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;ik_index&#x2F;_doc&#x2F;test</span><br></pre></td></tr></table></figure>

<p>并插入下面测试数据，数据格式为<code>JSON</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"content"</span>:<span class="string">"公安部：各地校车将享最高路权"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>搜索文档</p>
<p>自定义标签，用于高亮搜索词<code>fields</code>-&gt;<code>content</code>与字段相关</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"content"</span>:<span class="string">"公安"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"highlight"</span>:&#123;</span><br><span class="line">        <span class="attr">"pre_tags"</span>:[</span><br><span class="line">            <span class="string">"&lt;tag1&gt;"</span>,</span><br><span class="line">            <span class="string">"&lt;tag2&gt;"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"post_tags"</span>:[</span><br><span class="line">            <span class="string">"&lt;/tag1&gt;"</span>,</span><br><span class="line">            <span class="string">"&lt;/tag2&gt;"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"fields"</span>:&#123;</span><br><span class="line">            <span class="attr">"content"</span>:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>日志分析</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>日志分析</tag>
        <tag>Elasticsearch</tag>
        <tag>ELK</tag>
        <tag>IK</tag>
        <tag>分词</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK的实践-Elasticsearch</title>
    <url>/archives/d8e5daf7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>全文搜索引擎Elasticsearch的安装,操作。</p>
          </div> 

<a id="more"></a>

<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><div class="note warning no-icon">
            <ul><li>Window:10 </li><li>Java version:1.8.0_201</li><li>Elasticsearch: 7.4.0</li></ul>
          </div>

<blockquote>
<p>至于为什么选择7.4.0，因为这个技术更新迭代比较快，目前在阿里云商用的最高版本是7.4.0.为了兼容配置和使用语法之间的差异所以用这个作为教程。详情见  <a href="https://helpcdn.aliyun.com/document_detail/57770.html?spm=a2c4g.11174283.6.542.14df7958JigMLQ" target="_blank" rel="noopener">什么是阿里云Elasticsearch</a></p>
</blockquote>
<h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><ul>
<li>下面是官网地址</li>
</ul>
<blockquote>
<p><a href="https://www.elastic.co/cn/downloads/past-releases/elasticsearch-7-4-0" target="_blank" rel="noopener">Elasticsearch下载地址:</a></p>
</blockquote>
<ul>
<li>下面是百度云的下载地址</li>
</ul>
<blockquote>
<p><a href="https://pan.baidu.com/s/1yGsPA9xpzg4vagw2Wvunog" target="_blank" rel="noopener">Elasticsearch-7.4.0-windows-x86_64</a></p>
<p>提取码: chen</p>
</blockquote>
<h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><ul>
<li>打开解压目录的config文件夹，找到elasticsearch.yml文件，解开下面注释并修改。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设成具体的 IP。</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="comment">#访问端口</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打开bin文件夹，找到elasticsearch.bat文件双击打开，正常启动提示如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">future versions of Elasticsearch will require Java 11; your Java version from [D:\SoftWare\jdk\jre] does not meet this requirement</span><br><span class="line">[2020-04-05T00:06:17,248][INFO ][o.e.e.NodeEnvironment    ] [ANT] using [1] data paths, mounts [[绯荤粺 (D:)]], net usable_space [333gb], net total_space [465.7gb], types [NTFS]</span><br><span class="line">[2020-04-05T00:06:17,251][INFO ][o.e.e.NodeEnvironment    ] [ANT] heap size [990.7mb], compressed ordinary object pointers [true]</span><br><span class="line">[2020-04-05T00:06:17,265][INFO ][o.e.n.Node               ] [ANT] node name [ANT], node ID [vRWW4XpZQgmgRg5fb1XhTg], cluster name [elasticsearch]</span><br><span class="line">[2020-04-05T00:06:17,266][INFO ][o.e.n.Node               ] [ANT] version[7.4.0], pid[19492], build[default/zip/22e1767283e61a198cb4db791ea66e3f11ab9910/2019-09-27T08:36:48.569419Z], OS[Windows 10/10.0/amd64], JVM[Oracle Corporation/Java HotSpot(TM) 64-Bit Server VM/1.8.0_201/25.201-b09]</span><br><span class="line">[2020-04-05T00:06:17,267][INFO ][o.e.n.Node               ] [ANT] JVM home [D:\SoftWare\jdk\jre]</span><br><span class="line">[2020-04-05T00:06:17,268][INFO ][o.e.n.Node               ] [ANT] JVM arguments [-Xms1g, -Xmx1g, -XX:+UseConcMarkSweepGC, -XX:CMSInitiatingOccupancyFraction=75, -XX:+UseCMSInitiatingOccupancyOnly, -Des.networkaddress.cache.ttl=60, -Des.networkaddress.cache.negative.ttl=10, -XX:+AlwaysPreTouch, -Xss1m, -Djava.awt.headless=true, -Dfile.encoding=UTF-8, -Djna.nosys=true, -XX:-OmitStackTraceInFastThrow, -Dio.netty.noUnsafe=true, -Dio.netty.noKeySetOptimization=true, -Dio.netty.recycler.maxCapacityPerThread=0, -Dio.netty.allocator.numDirectArenas=0, -Dlog4j.shutdownHookEnabled=false, -Dlog4j2.disable.jmx=true, -Djava.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\elasticsearch, -XX:+HeapDumpOnOutOfMemoryError, -XX:HeapDumpPath=data, -XX:ErrorFile=logs/hs_err_pid%p.log, -XX:+PrintGCDetails, -XX:+PrintGCDateStamps, -XX:+PrintTenuringDistribution, -XX:+PrintGCApplicationStoppedTime, -Xloggc:logs/gc.log, -XX:+UseGCLogFileRotation, -XX:NumberOfGCLogFiles=32, -XX:GCLogFileSize=64m, -Dio.netty.allocator.type=unpooled, -XX:MaxDirectMemorySize=536870912, -Delasticsearch, -Des.path.home=D:\SoftWare\ELK\ElasticSearch\elasticsearch-7.4.0, -Des.path.conf=D:\SoftWare\ELK\ElasticSearch\elasticsearch-7.4.0\config, -Des.distribution.flavor=default, -Des.distribution.type=zip, -Des.bundled_jdk=true]</span><br><span class="line">[2020-04-05T00:06:22,159][INFO ][o.e.p.PluginsService     ] [ANT] loaded module [aggs-matrix-stats]</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">[2020-04-05T00:06:22,208][INFO ][o.e.p.PluginsService     ] [ANT] loaded module [x-pack-security]</span><br><span class="line">[2020-04-05T00:06:22,215][INFO ][o.e.p.PluginsService     ] [ANT] loaded module [x-pack-sql]</span><br><span class="line">[2020-04-05T00:06:22,218][INFO ][o.e.p.PluginsService     ] [ANT] loaded module [x-pack-voting-only-node]</span><br><span class="line">[2020-04-05T00:06:22,223][INFO ][o.e.p.PluginsService     ] [ANT] loaded module [x-pack-watcher]</span><br><span class="line">[2020-04-05T00:06:22,226][INFO ][o.e.p.PluginsService     ] [ANT] no plugins loaded</span><br><span class="line">[2020-04-05T00:06:33,963][INFO ][o.e.x.s.a.s.FileRolesStore] [ANT] parsed [0] roles from file [D:\SoftWare\ELK\ElasticSearch\elasticsearch-7.4.0\config\roles.yml]</span><br><span class="line">[2020-04-05T00:06:35,654][INFO ][o.e.x.m.p.l.CppLogMessageHandler] [ANT] [controller/10056] [Main.cc@110] controller (64 bit): Version 7.4.0 (Build 11d694e7bae395) Copyright (c) 2019 Elasticsearch BV</span><br><span class="line">[2020-04-05T00:06:36,473][DEBUG][o.e.a.ActionModule       ] [ANT] Using REST wrapper from plugin org.elasticsearch.xpack.security.Security</span><br><span class="line">[2020-04-05T00:06:37,154][INFO ][o.e.d.DiscoveryModule    ] [ANT] using discovery type [zen] and seed hosts providers [settings]</span><br><span class="line">[2020-04-05T00:06:38,823][INFO ][o.e.n.Node               ] [ANT] initialized</span><br><span class="line">[2020-04-05T00:06:38,826][INFO ][o.e.n.Node               ] [ANT] starting ...</span><br><span class="line">[2020-04-05T00:06:40,371][INFO ][o.e.t.TransportService   ] [ANT] publish_address &#123;127.0.0.1:9300&#125;, bound_addresses &#123;127.0.0.1:9300&#125;</span><br><span class="line">[2020-04-05T00:06:40,424][WARN ][o.e.b.BootstrapChecks    ] [ANT] the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br><span class="line">[2020-04-05T00:06:40,433][INFO ][o.e.c.c.Coordinator      ] [ANT] cluster UUID [re3-j4XJSqGZfXiNmT9Ykw]</span><br><span class="line">[2020-04-05T00:06:40,462][INFO ][o.e.c.c.ClusterBootstrapService] [ANT] no discovery configuration found, will perform best-effort cluster bootstrapping after [3s] unless existing master is discovered</span><br><span class="line">[2020-04-05T00:06:40,702][INFO ][o.e.c.s.MasterService    ] [ANT] elected-as-master ([1] nodes joined)[&#123;ANT&#125;&#123;vRWW4XpZQgmgRg5fb1XhTg&#125;&#123;zK-Phmm4S1ixxmC6Ed-XdA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=8499957760, xpack.installed=true, ml.max_open_jobs=20&#125; elect leader, _BECOME_MASTER_TASK_, _FINISH_ELECTION_], term: 2, version: 18, reason: master node changed &#123;previous [], current [&#123;ANT&#125;&#123;vRWW4XpZQgmgRg5fb1XhTg&#125;&#123;zK-Phmm4S1ixxmC6Ed-XdA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=8499957760, xpack.installed=true, ml.max_open_jobs=20&#125;]&#125;</span><br><span class="line">[2020-04-05T00:06:40,891][INFO ][o.e.c.s.ClusterApplierService] [ANT] master node changed &#123;previous [], current [&#123;ANT&#125;&#123;vRWW4XpZQgmgRg5fb1XhTg&#125;&#123;zK-Phmm4S1ixxmC6Ed-XdA&#125;&#123;127.0.0.1&#125;&#123;127.0.0.1:9300&#125;&#123;dilm&#125;&#123;ml.machine_memory=8499957760, xpack.installed=true, ml.max_open_jobs=20&#125;]&#125;, term: 2, version: 18, reason: Publication&#123;term=2, version=18&#125;</span><br><span class="line">[2020-04-05T00:06:40,971][INFO ][o.e.h.AbstractHttpServerTransport] [ANT] publish_address &#123;127.0.0.1:9200&#125;, bound_addresses &#123;127.0.0.1:9200&#125;</span><br><span class="line">[2020-04-05T00:06:40,974][INFO ][o.e.n.Node               ] [ANT] started</span><br><span class="line">[2020-04-05T00:06:41,263][INFO ][o.e.l.LicenseService     ] [ANT] license [08fcfd6a-82bb-450c-9078-0bee8fa3e32f] mode [basic] - valid</span><br><span class="line">[2020-04-05T00:06:41,269][INFO ][o.e.x.s.s.SecurityStatusChangeListener] [ANT] Active license is now [BASIC]; Security is disabled</span><br><span class="line">[2020-04-05T00:06:41,287][INFO ][o.e.g.GatewayService     ] [ANT] recovered [0] indices into cluster_state</span><br></pre></td></tr></table></figure>

<ul>
<li>在浏览器访问<a href="http://127.0.0.1:9200/" target="_blank" rel="noopener">http://127.0.0.1:9200/</a>   会提示下面的信息即为成功。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>:<span class="string">"ANT"</span>,</span><br><span class="line">    <span class="attr">"cluster_name"</span>:<span class="string">"elasticsearch"</span>,</span><br><span class="line">    <span class="attr">"cluster_uuid"</span>:<span class="string">"re3-j4XJSqGZfXiNmT9Ykw"</span>,</span><br><span class="line">    <span class="attr">"version"</span>:&#123;</span><br><span class="line">        <span class="attr">"number"</span>:<span class="string">"7.4.0"</span>,</span><br><span class="line">        <span class="attr">"build_flavor"</span>:<span class="string">"default"</span>,</span><br><span class="line">        <span class="attr">"build_type"</span>:<span class="string">"zip"</span>,</span><br><span class="line">        <span class="attr">"build_hash"</span>:<span class="string">"22e1767283e61a198cb4db791ea66e3f11ab9910"</span>,</span><br><span class="line">        <span class="attr">"build_date"</span>:<span class="string">"2019-09-27T08:36:48.569419Z"</span>,</span><br><span class="line">        <span class="attr">"build_snapshot"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"lucene_version"</span>:<span class="string">"8.2.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_wire_compatibility_version"</span>:<span class="string">"6.8.0"</span>,</span><br><span class="line">        <span class="attr">"minimum_index_compatibility_version"</span>:<span class="string">"6.0.0-beta1"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tagline"</span>:<span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><h6 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h6><p>下面列举了总体一些术语的概念简述,更多参考【<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/glossary.html" target="_blank" rel="noopener">Glossary of terms</a>】</p>
<table>
<thead>
<tr>
<th align="center">术语</th>
<th align="center">简述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">节点(Node)</td>
<td align="center">单个 Elasticserach 实例称为一个节点。</td>
</tr>
<tr>
<td align="center">集群(Cluster)</td>
<td align="center">一组节点构成一个集群。</td>
</tr>
<tr>
<td align="center">索引(Index)</td>
<td align="center">可以理解为数据库中的一个表。</td>
</tr>
<tr>
<td align="center">分片(Shard)</td>
<td align="center">一个Elasticserach实例索引(Index)分为多个Shard，可分布到不同节点上。</td>
</tr>
<tr>
<td align="center">副本(Replica)</td>
<td align="center">每个分片可以有多个副本。</td>
</tr>
<tr>
<td align="center">文档(Document)</td>
<td align="center">Elasticsearch中的顶级或根对象,一条文档可以理解为表中的一行数据(或者Java的一个实体类对象)</td>
</tr>
<tr>
<td align="center">字段(Field)</td>
<td align="center">可以理解为数据库的列名(或者Java的一个实体类对象的属性)</td>
</tr>
<tr>
<td align="center">Query</td>
<td align="center">过滤结果集的同时，会计算结果文档和查询条件的相关度，并将返回结果集按照相关度的高低排序。</td>
</tr>
<tr>
<td align="center">Filter</td>
<td align="center">按照搜索条件过滤出需要的数据。</td>
</tr>
<tr>
<td align="center">分析器(Analyzer)</td>
<td align="center">把一个文本块分析成一个个单独的词(term),由一个或多个Filter组成。</td>
</tr>
<tr>
<td align="center">Mapping</td>
<td align="center">由一个或多个Analyzer组成，可以理解为关系型数据库创建语句，定义文档字段及其类型、索引与存储方式。</td>
</tr>
</tbody></table>
<p>关系型数据库MySQL与Elasticsearch的对比(近似不相等)</p>
<table>
<thead>
<tr>
<th align="center">MySQL</th>
<th align="center">Elasticsearch</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Table</td>
<td align="center">Index</td>
</tr>
<tr>
<td align="center">Row</td>
<td align="center">Document</td>
</tr>
<tr>
<td align="center">Column</td>
<td align="center">Field</td>
</tr>
<tr>
<td align="center">Schema</td>
<td align="center">Mapping</td>
</tr>
<tr>
<td align="center">SQL</td>
<td align="center">DSL</td>
</tr>
</tbody></table>
<h6 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h6><p>下面列举了文档的一些字段简述。引自【<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-fields.html" target="_blank" rel="noopener">Meta-Fields</a>】</p>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">简述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">_index</td>
<td align="center">文档所属的索引。</td>
</tr>
<tr>
<td align="center">_type</td>
<td align="center">文档的映射类型,6.x版本中被废弃</td>
</tr>
<tr>
<td align="center">_id</td>
<td align="center">是文档的唯一编号ID</td>
</tr>
<tr>
<td align="center">_source</td>
<td align="center">表示文档主体的原始JSON。</td>
</tr>
<tr>
<td align="center">_size</td>
<td align="center">_source字段的大小(以字节为单位)</td>
</tr>
</tbody></table>
<h6 id="字段-Field"><a href="#字段-Field" class="headerlink" title="字段(Field)"></a>字段(Field)</h6><p>下面是字段类型的一些简述。引自【<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping.html#field-datatypes" target="_blank" rel="noopener">Field-datatypes</a>】</p>
<ul>
<li>简单类型等text，keyword，date，long， double，boolean或ip</li>
<li>支持JSON的层次结构性质的类型，如 object或nested。</li>
<li>或一种特殊类型的像geo_point， geo_shape或completion。</li>
</ul>
<blockquote>
<p>为不同的目的以不同的方式为同一字段建立索引通常很有用。例如，一个string字段可以被索引为text全文搜索的字段，也可以被索引keyword为排序或聚合的字段。或者，您可以使用standard分析器， english分析器和 french分析器为字符串字段建立索引。</p>
<p>这是多领域的目的。大多数数据类型通过fields参数支持多字段。</p>
</blockquote>
<h6 id="分析器-Analyzer"><a href="#分析器-Analyzer" class="headerlink" title="分析器(Analyzer)"></a>分析器(Analyzer)</h6><p>Elasticsearch随附各种内置分析器，无需进一步配置即可用于任何索引,引自【<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-analyzers.html" target="_blank" rel="noopener">Built-in analyzer reference</a>】</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">简述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-standard-analyzer.html" target="_blank" rel="noopener">标准分析</a></td>
<td align="center">根据<code>standard</code>Unicode文本分段算法的定义，分析器将文本划分为单词边界上的各个术语。它删除大多数标点符号，小写术语，并支持删除停用词。</td>
</tr>
<tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-simple-analyzer.html" target="_blank" rel="noopener">简单分析</a></td>
<td align="center">当<code>simple</code>分析器遇到非字母的字符时，它会将文本划分为多个术语。小写所有术语。</td>
</tr>
<tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-whitespace-analyzer.html" target="_blank" rel="noopener">空白分析</a></td>
<td align="center">该<code>whitespace</code>分析仪将文本分为方面每当遇到任何空白字符。它不小写。</td>
</tr>
<tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-stop-analyzer.html" target="_blank" rel="noopener">停止分析</a></td>
<td align="center">该<code>stop</code>分析仪是像<code>simple</code>仪，而且还支持去除停止词。</td>
</tr>
<tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-keyword-analyzer.html" target="_blank" rel="noopener">关键字分析</a></td>
<td align="center">所述<code>keyword</code>分析器是一个“空操作”分析器接受任何文本它被赋予并输出完全相同的文本作为一个单一的术语。</td>
</tr>
<tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-pattern-analyzer.html" target="_blank" rel="noopener">模式分析</a></td>
<td align="center">所述<code>pattern</code>分析仪使用一个正则表达式的文本分成条款。它支持小写字母和停用词。</td>
</tr>
<tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-lang-analyzer.html" target="_blank" rel="noopener">语言分析</a></td>
<td align="center">Elasticsearch提供了许多特定于语言的分析器，例如<code>english</code>或 <code>french</code>。</td>
</tr>
<tr>
<td align="center"><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-fingerprint-analyzer.html" target="_blank" rel="noopener">指纹分析</a></td>
<td align="center">该<code>fingerprint</code>分析仪是专业的分析仪，可创建可用于重复检测的指纹。</td>
</tr>
</tbody></table>
<p>如果没有符合需求可以自定义分析器：</p>
<ul>
<li>Character filters reference字符过滤器：</li>
</ul>
<p>字符串按顺序通过每个字符过滤器，他们的任务是在分词前整理字符串，一个字符过滤器可以用来去掉 HTML 标记，或者将<code>&amp;</code>转化成<code>and</code>。</p>
<ul>
<li>tokenizer 分词器：字符串被分词器分为单个的词条，一个简单的分词器遇到空格和标点的时候，可能会将文本拆分成词条，中文分词比较复杂,可以采用机器学习算法来分词。</li>
<li>token filters 表征过滤器： 最后，每个词都通过所有表征过滤（token filters），它可以修改词（例如将 Quick 转为小写），去掉词（例如停用词像 a 、 and 、 the 等等），或者增加词（例如同义词像 jump 和 leap ） 。</li>
</ul>
<blockquote>
<p>引用简书【<a href="https://www.jianshu.com/p/ba2c5786d8d0" target="_blank" rel="noopener">ElasticSearch analyzer 和 analyze API</a>】</p>
<p>官方文档【<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/analysis-analyzers.html#_custom_analyzers" target="_blank" rel="noopener">Custom_analyzers</a>】</p>
</blockquote>
<h6 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h6><p>下面是Mapping的一些简述。引自【<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping.html" target="_blank" rel="noopener">Mapping</a>】</p>
<p>映射是定义文档及其包含的字段的存储和索引方式的过程。例如，使用映射定义：</p>
<ul>
<li>哪些字符串字段应视为全文字段。</li>
<li>哪些字段包含数字，日期或地理位置。</li>
<li>日期值 的<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-date-format.html" target="_blank" rel="noopener">格式</a>。</li>
<li>自定义规则，用于控制<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/dynamic-mapping.html" target="_blank" rel="noopener">动态添加字段</a>的映射 。</li>
</ul>
<p>映射类型:</p>
<p>Elasticsearch支持Meta-fields、Fields or properties两种映射类型，将决定文档的索引方式。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-fields.html" target="_blank" rel="noopener">Meta-fields</a></p>
<p>用于自定义如何处理关联的文档元数据。元字段的示例包括文档 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-index-field.html" target="_blank" rel="noopener"><code>_index</code></a>，<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-id-field.html" target="_blank" rel="noopener"><code>_id</code></a>和 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-source-field.html" target="_blank" rel="noopener"><code>_source</code></a>领域。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/mapping-types.html" target="_blank" rel="noopener">Fields</a> <strong>or</strong> <em>properties</em></p>
<p>映射包含<code>properties</code>与文档相关的字段列表。定义整个文档有效载荷的各字段的数据类型、分词器等属性。</p>
<h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><h6 id="创建索引-Index"><a href="#创建索引-Index" class="headerlink" title="创建索引(Index)"></a>创建索引(Index)</h6><p>新建一个名为blog的索引(Index)，请求方式<code>PUT</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：索引名必须小写。</p>
</blockquote>
<h6 id="删除索引-Index"><a href="#删除索引-Index" class="headerlink" title="删除索引(Index)"></a>删除索引(Index)</h6><p>删除一个名为blog的索引(Index)，请求方式<code>DELETE</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog</span><br></pre></td></tr></table></figure>

<h6 id="查看索引-Index"><a href="#查看索引-Index" class="headerlink" title="查看索引(Index)"></a>查看索引(Index)</h6><p>查看当前节点的所有索引(Index)，请求方式<code>GET</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;_mapping?pretty&#x3D;true</span><br></pre></td></tr></table></figure>

<h6 id="创建mapping"><a href="#创建mapping" class="headerlink" title="创建mapping"></a>创建mapping</h6><p>为索引blog设置mapping，请求方式<code>PUT</code>，数据格式为<code>JSON</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_mapping</span><br></pre></td></tr></table></figure>

<p>字段分别是<code>productName</code>,<code>annual_rate</code>和<code>describe</code>，类型为<code>text</code>和<code>keyword</code>(参考上面的<strong>4.3字段(Field)</strong>说明)，<code>properties</code>为固定格式。</p>
<blockquote>
<p>注：7.0开始，不需要在mapping定义中指定type信息，因为默认每个索引只有一个type叫”_doc”。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"properties"</span>:&#123;</span><br><span class="line">        <span class="attr">"productName"</span>:&#123;</span><br><span class="line">            <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"annual_rate"</span>:&#123;</span><br><span class="line">            <span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"describe"</span>:&#123;</span><br><span class="line">            <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建成功返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="修改mapping"><a href="#修改mapping" class="headerlink" title="修改mapping"></a>修改mapping</h6><p>URL和创建一致，如果我们需要修改mapping新增一个字段<code>addField</code>可以执行下面命令，请求方式为<code>POST</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"properties"</span>:&#123;</span><br><span class="line">        <span class="attr">"addField"</span>:&#123;</span><br><span class="line">            <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功返回</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：只能新增字段，不能修改字段类型。</p>
</blockquote>
<h6 id="创建文档-Document"><a href="#创建文档-Document" class="headerlink" title="创建文档(Document)"></a>创建文档(Document)</h6><p>给索引为blog的创建一条文档(test)数据，请求方式<code>POST</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_doc&#x2F;test?pretty</span><br></pre></td></tr></table></figure>

<p>数据格式为<code>JSON</code>，数据为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"productName"</span>:<span class="string">"testpro"</span>,</span><br><span class="line">    <span class="attr">"annual_rate"</span>:<span class="string">"3.22%"</span>,</span><br><span class="line">    <span class="attr">"describe"</span>:<span class="string">"testpro"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建成功返回，result返回created，为创建的意思。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不指定文档的时候<code>_id</code>将会默认生成随机字符串，请求方式<code>POST</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_doc</span><br></pre></td></tr></table></figure>

<p>生成结果如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;_index&quot;: &quot;blog&quot;,</span><br><span class="line">    &quot;_type&quot;: &quot;_doc&quot;,</span><br><span class="line">    &quot;_id&quot;: &quot;C_HBSnEBbIzwWm6K-yMt&quot;,</span><br><span class="line">    &quot;_version&quot;: 1,</span><br><span class="line">    &quot;result&quot;: &quot;created&quot;,</span><br><span class="line">    &quot;_shards&quot;: &#123;</span><br><span class="line">        &quot;total&quot;: 2,</span><br><span class="line">        &quot;successful&quot;: 1,</span><br><span class="line">        &quot;failed&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;_seq_no&quot;: 4,</span><br><span class="line">    &quot;_primary_term&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：创建文档的格式为：<code>_doc</code>是固定的，文档名称可无。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ES实例地址&#x2F;_index&#x2F;_doc&#x2F;文档名称</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="更新文档-Document"><a href="#更新文档-Document" class="headerlink" title="更新文档(Document)"></a>更新文档(Document)</h6><p>更新索引(Index)为blog,文档名称为test的数据。请求方式<code>PUT</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_doc&#x2F;test?pretty</span><br></pre></td></tr></table></figure>

<p>数据格式<code>JSON</code>请求数据为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"productName"</span>:<span class="string">"testprobiubiu"</span>,</span><br><span class="line">    <span class="attr">"annual_rate"</span>:<span class="string">"4.21%"</span>,</span><br><span class="line">    <span class="attr">"describe"</span>:<span class="string">"testprobiubiu"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果为,result返回updated为更新的意思。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">  <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">  <span class="attr">"_id"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"_version"</span>: <span class="number">6</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"updated"</span>,</span><br><span class="line">  <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">    <span class="attr">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"_seq_no"</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="attr">"_primary_term"</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="统计文档-Document"><a href="#统计文档-Document" class="headerlink" title="统计文档(Document)"></a>统计文档(Document)</h6><p>统计Elasticserach集群中文档数，请求方式<code>GET</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;_count?pretty&#x3D;true</span><br></pre></td></tr></table></figure>

<p>返回count为文档数successful为成功数。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "count": 1,</span><br><span class="line">  "_shards": &#123;</span><br><span class="line">    "total": 2,</span><br><span class="line">    "successful": 2,</span><br><span class="line">    "skipped": 0,</span><br><span class="line">    "failed": 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="搜索文档-Document"><a href="#搜索文档-Document" class="headerlink" title="搜索文档(Document)"></a>搜索文档(Document)</h6><p>搜索索引为blog，文档名称为test的语法，请求方式<code>GET</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_doc&#x2F;test</span><br></pre></td></tr></table></figure>

<p>搜索返回，<code>_version</code>执行了两次插入所以为2</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"test"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"_seq_no"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"productName"</span>: <span class="string">"testpro"</span>,</span><br><span class="line">        <span class="attr">"annual_rate"</span>: <span class="string">"3.22%"</span>,</span><br><span class="line">        <span class="attr">"describe"</span>: <span class="string">"testpro"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果上面创建文档的时候<strong>没指定</strong>文档名称，则搜索以生成的随机字符串为参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_doc&#x2F;C_HBSnEBbIzwWm6K-yMt</span><br></pre></td></tr></table></figure>

<p>这样返回的数据为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"C_HBSnEBbIzwWm6K-yMt"</span>,</span><br><span class="line">    <span class="attr">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"_seq_no"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"_primary_term"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"found"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"_source"</span>: &#123;</span><br><span class="line">        <span class="attr">"productName"</span>: <span class="string">"testpro2"</span>,</span><br><span class="line">        <span class="attr">"annual_rate"</span>: <span class="string">"3.22%"</span>,</span><br><span class="line">        <span class="attr">"describe"</span>: <span class="string">"testpro2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>小结：搜索指定索引指定文档的格式为，注意<code>_doc</code>是固定的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ES实例地址&#x2F;_index&#x2F;_doc&#x2F;_id</span><br></pre></td></tr></table></figure>
</blockquote>
<h6 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h6><p><strong>所有结果</strong></p>
<p>如果想返回当前索引(Index)下的所有文档，则执行下面。请求方式<code>GET</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_doc&#x2F;_search</span><br></pre></td></tr></table></figure>

<p>返回结果是blog所有文档。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">4541</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test2"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"testpro"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"3.22%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"testpro"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"C_HBSnEBbIzwWm6K-yMt"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"testpro2"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"3.22%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"testpro2"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.0</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"testprobiubiu"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.21%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"testprobiubiu"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面返回字段简述：</p>
<ul>
<li><code>took</code>表示该操作的耗时（单位为毫秒）。</li>
<li><code>timed_out</code>表示是否超时。</li>
<li><code>hits</code>表示命中的记录的数组。</li>
<li><code>total</code>里面的<code>value</code>表示返回记录数。</li>
<li><code>max_score</code>表示最高的匹配程度。</li>
</ul>
<blockquote>
<p>小结：搜索指定索引下的所有文档的格式为，注意<code>_doc</code>是固定的，也可以省略。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ES实例地址&#x2F;_index&#x2F;_doc&#x2F;_search</span><br></pre></td></tr></table></figure>
</blockquote>
<p><strong>Match 查询</strong></p>
<p>先将上面文档<code>productName</code>改为“红苹果”和“青苹果”，然后查询指定的匹配条件是<code>productName</code>字段里面包含”苹果”这个词。请求URL为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;blog&#x2F;_doc&#x2F;_search</span><br></pre></td></tr></table></figure>

<p>数据格式<code>JSON</code>，请求方式为<code>GET</code>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"productName"</span>:<span class="string">"苹果"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">1.6202165</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test3"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.6202165</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"红苹果"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.31%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"3"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.6202165</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"青苹果"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.31%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"3"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>指定返回条数</strong></p>
<p>默认返回10条结果。如果想指定返回条数URL不变可以将请求的<code>JSON</code>内容添加一个<code>size</code>，例如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"productName"</span>:<span class="string">"苹果"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"size"</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">1.6202165</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test3"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.6202165</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"红苹果"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.31%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"3"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>指定偏移量</strong></p>
<p>指定偏移量<code>from</code>为1.这时候从1开始查询。例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;productName&quot;:&quot;苹果&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;size&quot;:2,</span><br><span class="line">    &quot;from&quot;:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果为，这时候可以看到，本来红苹果在位置1的，被偏移了，所以青苹果为位置1了.就算返回两条也只是把偏移后的实际结果返回。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">59</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">0.8949376</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">0.8949376</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"青苹果"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.31%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"3"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>逻辑查询</strong></p>
<p>当我们需要查询关系是或的时候<code>OR</code>,请求的内容可以<strong>空格</strong>分开，例如查询包含青或红的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match"</span>:&#123;</span><br><span class="line">            <span class="attr">"productName"</span>:<span class="string">"青 红"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果为,结果可以看出，返回了青苹果和红苹果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">1.2067742</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test3"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.2067742</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"红苹果"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.31%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"3"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.2067742</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"青苹果"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.31%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"3"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我需要查询关系为与的时候<code>AND</code>.使用<code>bool-must</code>需要多个<code>match</code>,例如查询条件包含红和果字的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"bool"</span>:&#123;</span><br><span class="line">            <span class="attr">"must"</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"match"</span>:&#123;</span><br><span class="line">                        <span class="attr">"productName"</span>:<span class="string">"红"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"match"</span>:&#123;</span><br><span class="line">                        <span class="attr">"productName"</span>:<span class="string">"果"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回结果为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"took"</span>: <span class="number">177</span>,</span><br><span class="line">    <span class="attr">"timed_out"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"_shards"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"skipped"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"failed"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"hits"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: &#123;</span><br><span class="line">            <span class="attr">"value"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"relation"</span>: <span class="string">"eq"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"max_score"</span>: <span class="number">1.6759726</span>,</span><br><span class="line">        <span class="attr">"hits"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"_index"</span>: <span class="string">"blog"</span>,</span><br><span class="line">                <span class="attr">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">                <span class="attr">"_id"</span>: <span class="string">"test3"</span>,</span><br><span class="line">                <span class="attr">"_score"</span>: <span class="number">1.6759726</span>,</span><br><span class="line">                <span class="attr">"_source"</span>: &#123;</span><br><span class="line">                    <span class="attr">"productName"</span>: <span class="string">"红苹果"</span>,</span><br><span class="line">                    <span class="attr">"annual_rate"</span>: <span class="string">"4.31%"</span>,</span><br><span class="line">                    <span class="attr">"describe"</span>: <span class="string">"3"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="查看集群-Cluster-健康"><a href="#查看集群-Cluster-健康" class="headerlink" title="查看集群(Cluster)健康"></a>查看集群(Cluster)健康</h6><p>查看集群健康情况，请求方式<code>GET</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;_cat&#x2F;health?v</span><br></pre></td></tr></table></figure>

<h6 id="查看集群-Cluster-索引-Index"><a href="#查看集群-Cluster-索引-Index" class="headerlink" title="查看集群(Cluster)索引(Index)"></a>查看集群(Cluster)索引(Index)</h6><p>查看集群中包含的索引信息，请求方式<code>GET</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localhost:9200&#x2F;_cat&#x2F;indices?v</span><br></pre></td></tr></table></figure>

<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><div class="note info">
            <p>查询参考<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">全文搜索引擎 Elasticsearch 入门教程</a></p><p>操作参考<a href="https://helpcdn.aliyun.com/document_detail/155919.html?spm=a2c4g.11186623.6.783.18ce7f81SAI0mV" target="_blank" rel="noopener">curl命令使用介绍</a></p><p>其它参考</p><p><a href="https://www.pianshen.com/article/55823060/" target="_blank" rel="noopener">Elasticsearch学习-Doc与Segment原理</a></p><p><a href="https://www.jianshu.com/p/7950d6cd78e5" target="_blank" rel="noopener">【elasticsearch入门】elasticsearch索引的mapping及其设置</a></p><p><a href="https://www.jianshu.com/p/ba2c5786d8d0" target="_blank" rel="noopener">【ES】ElasticSearch analyzer 和 analyze API</a></p><p><a href="https://www.cnblogs.com/duanxz/p/6528168.html" target="_blank" rel="noopener"><a href="https://www.cnblogs.com/duanxz/p/6528168.html" target="_blank" rel="noopener">ElasticSearch中Filter和Query的异同</a></a></p><p><a href="https://www.cnblogs.com/sandea/p/10557125.html" target="_blank" rel="noopener">mapping的写入与查看</a></p><p><a href="https://www.cnblogs.com/Alandre/p/11683463.html" target="_blank" rel="noopener">Elasticsearch 7.x 之文档、索引和 REST API 【基础入门篇】</a></p>
          </div>]]></content>
      <categories>
        <category>日志分析</category>
        <category>ELK</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>日志分析</tag>
        <tag>Elasticsearch</tag>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos下安装Nginx</title>
    <url>/archives/44509/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Centos下安装Nginx</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>CentOS :7.7.1908</li></ul>
          </div>

<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><ul>
<li>安装相关依赖，分别执行下面命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install openssl</span><br><span class="line">yum install zlib</span><br><span class="line">yum install pcre</span><br></pre></td></tr></table></figure>

<ul>
<li>下载库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">Retrieving http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line">warning: /var/tmp/rpm-tmp.0bswPx: Header V4 RSA/SHA1 Signature, key ID 7bd9bf62: NOKEY</span><br><span class="line">Preparing...                          ################################# [100%]</span><br><span class="line">        package nginx-release-centos-7-0.el7.ngx.noarch is already installed</span><br></pre></td></tr></table></figure>

<ul>
<li>安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# yum install nginx</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Repository base is listed more than once in the configuration</span><br><span class="line">Repository updates is listed more than once in the configuration</span><br><span class="line">Repository extras is listed more than once in the configuration</span><br><span class="line">Repository centosplus is listed more than once in the configuration</span><br><span class="line">Repository epel is listed more than once in the configuration</span><br><span class="line">Repository epel-debuginfo is listed more than once in the configuration</span><br><span class="line">Repository epel-source is listed more than once in the configuration</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.163.com</span><br><span class="line">Resolving Dependencies</span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Running transaction check</span></span><br><span class="line"><span class="meta">---&gt;</span><span class="bash"> Package nginx.x86_64 1:1.16.1-1.el7.ngx will be installed</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Finished Dependency Resolution</span></span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">================================================================================================================================================================================</span><br><span class="line"> Package                               Arch                                   Version                                               Repository                             Size</span><br><span class="line">================================================================================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> nginx                                 x86_64                                 1:1.16.1-1.el7.ngx                                    nginx                                 766 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">================================================================================================================================================================================</span><br><span class="line">Install  1 Package</span><br><span class="line"></span><br><span class="line">Total download size: 766 k</span><br><span class="line">Installed size: 2.7 M</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">nginx-1.16.1-1.el7.ngx.x86_64.rpm                                                                                                                        | 766 kB  00:00:38</span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction test</span><br><span class="line">Transaction test succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : 1:nginx-1.16.1-1.el7.ngx.x86_64                                                                                                                              1/1</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Thanks for using nginx!</span><br><span class="line"></span><br><span class="line">Please find the official documentation for nginx here:</span><br><span class="line">* http://nginx.org/en/docs/</span><br><span class="line"></span><br><span class="line">Please subscribe to nginx-announce mailing list to get</span><br><span class="line">the most important news about nginx:</span><br><span class="line">* http://nginx.org/en/support.html</span><br><span class="line"></span><br><span class="line">Commercial subscriptions for nginx are available on:</span><br><span class="line">* http://nginx.com/products/</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">  Verifying  : 1:nginx-1.16.1-1.el7.ngx.x86_64                                                                                                                              1/1</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  nginx.x86_64 1:1.16.1-1.el7.ngx</span><br><span class="line"></span><br><span class="line">Complete!</span><br></pre></td></tr></table></figure>

<ul>
<li>执行下面命令启动nginx</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>当启动成功后，回到 window 环境访问你的公网地址会显示下面，即为安装成功。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200403000558.png" alt="安装成功访问图"></p>
<h6 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h6><ul>
<li>下面以我们之前运行的项目进行配置，进入到</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# cd /etc/nginx/conf.d/</span><br></pre></td></tr></table></figure>

<ul>
<li>在default.conf文件添加我们项目的<em>地址:端口:项目上下文路径</em>。例如下面的地址。注意http不能省略，不用添加到具体接口getDocker。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200403020518.png" alt="default.conf文件配置"></p>
<ul>
<li>如果我们有多个项目就添加多个location，例如上面只添加blog地址。每次修改都需要重启nginx服务。</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">location /blog &#123;</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">    proxy_pass http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8081</span>/blog;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>当我们在window端访问时就不用使用端口了，会返回接口的内容，它们的对应关系如下图</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200403021018.png" alt="对应关系图"></p>
<h6 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h6><ul>
<li>启动nginx服务：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>停止服务：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>设置开机自启动：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>停止开机自启动：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl disable nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>查看服务当前状态：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>重新启动服务：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx.service</span><br></pre></td></tr></table></figure>

<ul>
<li>检查配置文件正确性：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br></pre></td></tr></table></figure>

<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><div class="note info">
            <p><a href="https://blog.csdn.net/finn_wft/article/details/89148394" target="_blank" rel="noopener">Centos 7.6+Nginx实现反向代理</a></p><p><a href="https://www.jianshu.com/p/ae76c223c6ef" target="_blank" rel="noopener">Nginx正向代理与反向代理</a></p>
          </div>]]></content>
      <categories>
        <category>Linux</category>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis动态SQL和高级映射</title>
    <url>/archives/19362/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Mybatis动态SQL，二级缓存，返回自增主键和高级映射使用</p>
          </div> 

<a id="more"></a>

<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li><li>Mybatis:3.5.4</li><li>MySQL:5.6.43</li></ul>
          </div>

<h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  └─main</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─blog</span><br><span class="line">│      │      └─demo</span><br><span class="line">│      │          │  Demo10Application.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          ├─controller</span><br><span class="line">│      │          │      TestController.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          ├─db</span><br><span class="line">│      │          │      city.sql</span><br><span class="line">│      │          │      person.sql</span><br><span class="line">│      │          │</span><br><span class="line">│      │          ├─entity</span><br><span class="line">│      │          │      City.java</span><br><span class="line">│      │          │      Person.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          ├─mapper</span><br><span class="line">│      │          │      CityMapper.java</span><br><span class="line">│      │          │      PersonMapper.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          ├─service</span><br><span class="line">│      │          │  │  CityService.java</span><br><span class="line">│      │          │  │  PersonService.java</span><br><span class="line">│      │          │  │</span><br><span class="line">│      │          │  └─impl</span><br><span class="line">│      │          │          CityServiceImpl.java</span><br><span class="line">│      │          │          PersonServiceImpl.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          └─vo</span><br><span class="line">│      │                  CityManyVO.java</span><br><span class="line">│      │                  PersonManyVO.java</span><br><span class="line">│      │</span><br><span class="line">│      └─resources</span><br><span class="line">│          │  application<span class="literal">-local</span>.yml</span><br><span class="line">│          │  application.yml</span><br><span class="line">│          │</span><br><span class="line">│          ├─mapper</span><br><span class="line">│          │      CityMapper.xml</span><br><span class="line">│          │      PersonMapper.xml</span><br></pre></td></tr></table></figure>

<h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql数据库驱动包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>为了区分多环境，分别创建了<em>application.yml</em>和<em>application-local.yml</em>文件</p>
<ul>
<li><em>application.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8089</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#应用程序的上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#指定环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>application-local.yml</em>配置如下</li>
</ul>
<p>因为项目使用了Mybatis的二级缓存，所以添加<em>cache-enabled: true</em></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/test_blog?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#MyBatis的映射文件的位置，resource的mapper下的所有Mapper.xml结尾的文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment">#包搜索类型别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">blog.demo.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启MyBatis的二级缓存</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#执行SQL打印</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<h5 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h5><p>为了测试一对多和多对一，添加了两个表<em>city</em>(城市表)和<em>person</em>(人的信息表)，为了更直观只添加了部分字段。</p>
<ul>
<li><em>city</em>数据脚本如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for city</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;city&#96;;</span><br><span class="line">CREATE TABLE &#96;city&#96;  (</span><br><span class="line">  &#96;c_id&#96; int(10) NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,</span><br><span class="line">  &#96;c_name&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#39;城市名&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;c_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 13 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci COMMENT &#x3D; &#39;城市表&#39; ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of city</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;city&#96; VALUES (1, &#39;广州&#39;);</span><br><span class="line">INSERT INTO &#96;city&#96; VALUES (2, &#39;深圳&#39;);</span><br><span class="line">INSERT INTO &#96;city&#96; VALUES (3, &#39;上海&#39;);</span><br><span class="line">INSERT INTO &#96;city&#96; VALUES (4, &#39;北京&#39;);</span><br><span class="line">INSERT INTO &#96;city&#96; VALUES (5, &#39;浙江&#39;);</span><br><span class="line">INSERT INTO &#96;city&#96; VALUES (6, &#39;白云&#39;);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<ul>
<li><em>person</em>数据脚本如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for person</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;person&#96;;</span><br><span class="line">CREATE TABLE &#96;person&#96;  (</span><br><span class="line">  &#96;p_id&#96; int(10) NOT NULL AUTO_INCREMENT COMMENT &#39;自增主键&#39;,</span><br><span class="line">  &#96;p_name&#96; varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">  &#96;p_sex&#96; int(2) NULL DEFAULT NULL COMMENT &#39;0女1男&#39;,</span><br><span class="line">  &#96;c_id&#96; int(10) NULL DEFAULT NULL COMMENT &#39;城市表主键(city)&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;p_id&#96;) USING BTREE,</span><br><span class="line">  INDEX &#96;fk_person_city_1&#96;(&#96;c_id&#96;) USING BTREE,</span><br><span class="line">  CONSTRAINT &#96;fk_person_city_1&#96; FOREIGN KEY (&#96;c_id&#96;) REFERENCES &#96;city&#96; (&#96;c_id&#96;) ON DELETE RESTRICT ON UPDATE RESTRICT</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 4 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci COMMENT &#x3D; &#39;人的信息表&#39; ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of person</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (1, &#39;111&#39;, 1, 1);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (2, &#39;2&#39;, 0, 1);</span><br><span class="line">INSERT INTO &#96;person&#96; VALUES (3, &#39;3&#39;, 1, 2);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><h6 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h6><ul>
<li>动态SQL主要常用的是</li>
</ul>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">if</td>
<td align="center">判断是否满足，类似于JAVA的if</td>
</tr>
<tr>
<td align="center">where</td>
<td align="center">只有在一个以上的判断自动插入where，可以自动去除最后的”AND”或”OR”</td>
</tr>
<tr>
<td align="center">choose (when, otherwise)</td>
<td align="center">多条件判断，类似于JAVA的switch 语句</td>
</tr>
<tr>
<td align="center">trim</td>
<td align="center">定制我们想要的功能</td>
</tr>
<tr>
<td align="center">set</td>
<td align="center">用于动态更新列</td>
</tr>
<tr>
<td align="center">foreach</td>
<td align="center">常用语构建查询语句 IN 条件</td>
</tr>
</tbody></table>
<ul>
<li>if和where的使用</li>
</ul>
<p>只有pName不为空才会拼接where上去</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getIfAndWhere"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">       SELECT</span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">       FROM person AS p</span><br><span class="line">       <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pName != null and pName != ''"</span>&gt;</span></span><br><span class="line">               p.p_name=#&#123;pName,jdbcType=VARCHAR&#125;</span><br><span class="line">           <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>choose和trim的使用</li>
</ul>
<p>自动追加<em>where</em>前缀(因为<em>choose</em>不会为空)，<em>pName</em>和<em>pSex</em>都不为空只拼接<em>pName</em>条件，可以理解为只有一个满足就退出判断。<em>pName</em>和<em>pSex</em>都为空默认执行<em>p.p_sex=1</em>，prefixOverrides会自动去除第一个条件的AND或OR,达到了我们定制的功能。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getChooseAndTrim"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">        FROM person AS p</span><br><span class="line">        <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and|or"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"pName != null and pName != ''"</span>&gt;</span></span><br><span class="line">                    AND p.p_name=#&#123;pName,jdbcType=VARCHAR&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"pSex != null"</span>&gt;</span></span><br><span class="line">                    AND p.p_sex=#&#123;pSex,jdbcType=INTEGER&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                    AND p.p_sex=1</span><br><span class="line">                <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>set的用法</li>
</ul>
<p>多用于更新语句，<em>pName</em>和<em>pSex</em>都不为空时，会自动拼接前缀<em>set</em>和消除最后一个条件<em>pSex</em>后面的逗号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateSet"</span>&gt;</span></span><br><span class="line">        UPDATE person</span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"person.pName != null and person.pName != ''"</span>&gt;</span></span><br><span class="line">                p_name=#&#123;person.pName,jdbcType=VARCHAR&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"person.pSex != null "</span>&gt;</span></span><br><span class="line">                p_sex=#&#123;person.pSex,jdbcType=INTEGER&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        WHERE p_id=#&#123;person.pId,jdbcType=INTEGER&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>foreach的用法</li>
</ul>
<p>构建查询语句 IN 条件</p>
<blockquote>
<ol>
<li><code>item</code> 为遍历的变量。</li>
<li><code>index</code> 当前遍历的下标,从0开始。</li>
<li><code>collection</code>是Mapper层指定的参数名称。</li>
<li><code>open</code>为开始拼接的字符串。</li>
<li><code>separator</code>为分离的字符串。</li>
<li><code>close</code>为结束拼接的字符串。</li>
</ol>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getForeach"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">        FROM person AS p</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"pIdList != null and pIdList.size() != 0"</span>&gt;</span></span><br><span class="line">            WHERE p.p_id IN</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">item</span>=<span class="string">"pId"</span> <span class="attr">index</span>=<span class="string">"index"</span> <span class="attr">collection</span>=<span class="string">"pIdList"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">                #&#123;pId&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="高级映射"><a href="#高级映射" class="headerlink" title="高级映射"></a>高级映射</h6><p>表结构关系如图，一个城市(city)有多个人(person),每个人都有一个唯一的城市。当使用Navicat 12可视化的模型管理的默认UI时，当鼠标停留在中间的连接线，两个表的颜色回显为“一绿多蓝”，意思就是绿色的为一，蓝色为多</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200331135628.png" alt="表结构关系图"></p>
<p><strong>一对多查询</strong></p>
<p>实体类分别为<em>City<em>和</em>Person</em></p>
<p>一方类为City类,指向多方的Person</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 城市表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/30. 16:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">City</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer cId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Person&gt; person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多方的类为Person</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 人的信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/30. 18:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0女1男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pSex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市表(city)主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer cId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一种方法，不适用于分页场景，因为返回结果集总数会比需求数据大。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--一对多查询结果集使用collection--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"cityMap"</span> <span class="attr">type</span>=<span class="string">"City"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_name"</span> <span class="attr">property</span>=<span class="string">"cName"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"person"</span> <span class="attr">ofType</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"p_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"pId"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"p_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"pName"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"p_sex"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"pSex"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"cp_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"cId"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--一对多查询,一对多不使用二级缓存--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOneToMany"</span> <span class="attr">resultMap</span>=<span class="string">"cityMap"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">c.c_id,</span><br><span class="line">c.c_name,</span><br><span class="line">p.p_id,</span><br><span class="line">p.p_name,</span><br><span class="line">p.p_sex,</span><br><span class="line">p.c_id AS cp_id</span><br><span class="line">   FROM</span><br><span class="line">city AS c</span><br><span class="line">INNER JOIN person AS p ON c.c_id = p.c_id</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种方法，适用分页场景，当表数据量大时不推荐使用，因为会查询数据库N+1次，这种方式有两种传递参数的方法。比较喜欢下面一种。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一对多查询第二种方式,一对多不使用二级缓存--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOneToManyTwo"</span> <span class="attr">resultMap</span>=<span class="string">"getOneToManyTwoMap"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">     SELECT c.c_id AS cp_id, c.c_name FROM city AS c</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"getOneToManyTwoMap"</span> <span class="attr">type</span>=<span class="string">"City"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cp_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_name"</span> <span class="attr">property</span>=<span class="string">"cName"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"person"</span> <span class="attr">ofType</span>=<span class="string">"Person"</span> <span class="attr">select</span>=<span class="string">"selectPerson"</span> <span class="attr">column</span>=<span class="string">"cp_id"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方法2 多表单独查询方式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">resultMap</span>=<span class="string">"selectPersonMap"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      SELECT p.p_id, p.p_name,p.p_sex, p.c_id FROM person AS p WHERE p.c_id=#&#123;chen_id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>select=”selectPerson”<em>中的</em>selectPerson<em>查询语句必须要有一个WHERE，例如city和person靠c_id字段关联，那么它的条件为</em>WHERE p.c_id=#{chen_id}</em> ，具体关系和N+1说明如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200331141736.png" alt="第一种传递参数方式"></p>
<p>下图为第二种传递参数方式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200331141752.png" alt="第二种传递参数方式"></p>
<ul>
<li><p><strong>多对一查询</strong></p>
<p>实体类分别为<em>CityManyVO<em>和</em>PersonManyVO</em></p>
<p>多方的实体为<em>PersonManyVO</em>,引用<em>CityManyVO</em></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/31. 0:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonManyVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String pName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 0女1男</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pSex;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市表(city)主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer cId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CityManyVO cityManyVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一方的实体<em>CityManyVO</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.demo.entity.Person;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 城市表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/30. 16:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CityManyVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer cId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第一种方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">   <span class="comment">&lt;!--多对一查询结果集使用association--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getManyToOne"</span> <span class="attr">resultMap</span>=<span class="string">"getManyToOneMap"</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">c.c_id,</span><br><span class="line">c.c_name,</span><br><span class="line">p.p_id,</span><br><span class="line">p.p_name,</span><br><span class="line">p.p_sex,</span><br><span class="line">p.c_id AS cp_id</span><br><span class="line">   FROM</span><br><span class="line">   person AS p</span><br><span class="line">INNER JOIN 	city AS c ON c.c_id = p.c_id</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"getManyToOneMap"</span> <span class="attr">type</span>=<span class="string">"blog.demo.vo.PersonManyVO"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"pId"</span> <span class="attr">column</span>=<span class="string">"p_id"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"pName"</span> <span class="attr">column</span>=<span class="string">"p_name"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"pSex"</span> <span class="attr">column</span>=<span class="string">"p_sex"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cId"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"cityManyVO"</span> <span class="attr">javaType</span>=<span class="string">"blog.demo.vo.CityManyVO"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_name"</span> <span class="attr">property</span>=<span class="string">"cName"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>第二种方法,也有两种传递参数的方法，和上面一样。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法2 多表单独查询方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectCity"</span> <span class="attr">resultMap</span>=<span class="string">"selectCityMap"</span>&gt;</span></span><br><span class="line">    SELECT c.c_id AS cp_id, c.c_name FROM city AS c WHERE c.c_id=#&#123;chen_id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"selectCityMap"</span> <span class="attr">type</span>=<span class="string">"blog.demo.vo.CityManyVO"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"cp_id"</span> <span class="attr">property</span>=<span class="string">"cId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_name"</span> <span class="attr">property</span>=<span class="string">"cName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多对一第二种方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getManyToOneTwo"</span> <span class="attr">resultMap</span>=<span class="string">"ManyToOneTwoMap"</span>&gt;</span></span><br><span class="line">  SELECT p.p_id, p.p_name,p.p_sex, p.c_id FROM person AS p</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--column="c_id"为外键，与结果集映射无关--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"ManyToOneTwoMap"</span> <span class="attr">type</span>=<span class="string">"blog.demo.vo.PersonManyVO"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"pId"</span> <span class="attr">column</span>=<span class="string">"p_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"pName"</span> <span class="attr">column</span>=<span class="string">"p_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"pSex"</span> <span class="attr">column</span>=<span class="string">"p_sex"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"cId"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"cityManyVO"</span> <span class="attr">javaType</span>=<span class="string">"blog.demo.vo.CityManyVO"</span> <span class="attr">select</span>=<span class="string">"selectCity"</span> <span class="attr">column</span>=<span class="string">"c_id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="二级缓存和返回自增主键"><a href="#二级缓存和返回自增主键" class="headerlink" title="二级缓存和返回自增主键"></a>二级缓存和返回自增主键</h6><ul>
<li>使用二级缓存在下面位置添加第三行</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"blog.demo.mapper.CityMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启二级缓存--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span> <span class="attr">flushInterval</span>=<span class="string">"60000"</span> <span class="attr">size</span>=<span class="string">"512"</span> <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"blog.demo.entity.City"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"c_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"cId"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"c_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"cName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">  .........</span><br><span class="line">  .........</span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当我们开启后只有这个CityMapper.xml受影响，所以使用<strong>一对多</strong>和<strong>多对一</strong>时为避免查询的数据不准确，在select添加<em>useCache=”false”</em>,例如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--一对多查询第二种方式,一对多不使用二级缓存--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getOneToManyTwo"</span> <span class="attr">resultMap</span>=<span class="string">"getOneToManyTwoMap"</span> <span class="attr">useCache</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">     SELECT c.c_id AS cp_id, c.c_name FROM city AS c</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新增返回主键</li>
</ul>
<p>在insert添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keyColumn&#x3D;&quot;c_id&quot; useGeneratedKeys&#x3D;&quot;true&quot; keyProperty&#x3D;&quot;city.cId&quot;</span><br></pre></td></tr></table></figure>

<p>CityMapper层指定了参数名称city，keyProperty属性必须使用city.cId，参数必须为实体或者List&lt;City&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一个城市</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> city 城市信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 自增主键</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addCity</span><span class="params">(@Param(<span class="string">"city"</span>)</span> City city)</span>;</span><br></pre></td></tr></table></figure>

<p>xml为。keyColumn为city表的自增主键字段名，告诉它将返回给属性cId。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加一个城市，返回自增主键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addCity"</span> <span class="attr">keyColumn</span>=<span class="string">"c_id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"city.cId"</span>&gt;</span></span><br><span class="line">    INSERT INTO city(c_name) VALUES (#&#123;city.cName,jdbcType=VARCHAR&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Java层的代码,如果参数为List&lt;City&gt;则可以遍历或其它方法获取。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 添加一个城市</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> cName 城市名称</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> 自增主键</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addCity</span><span class="params">(String cName)</span> </span>&#123;</span><br><span class="line">     City city = <span class="keyword">new</span> City();</span><br><span class="line">     city.setCName(cName);</span><br><span class="line">     cityMapper.addCity(city);</span><br><span class="line">     <span class="comment">//添加成功后自动将获取返回的主键给cId</span></span><br><span class="line">     <span class="keyword">return</span> city.getCId();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h5 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h5><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-10" target="_blank" rel="noopener">源码链接</a></p>
          </div>

]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
        <tag>SQL</tag>
        <tag>Mybatis</tag>
        <tag>案例</tag>
        <tag>集成</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成Docker</title>
    <url>/archives/54092/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>SpringBoot集成Docker</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Centos 7.7.1908</li><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li></ul>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  .gitignore</span><br><span class="line">│  demo<span class="literal">-9</span>.iml</span><br><span class="line">│  Dockerfile</span><br><span class="line">│  HELP.md</span><br><span class="line">│  mvnw</span><br><span class="line">│  mvnw.cmd</span><br><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  └─main</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─blog</span><br><span class="line">│      │      └─demo</span><br><span class="line">│      │          │  Demo9Application.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          └─controller</span><br><span class="line">│      │                  TestController.java</span><br><span class="line">│      │</span><br><span class="line">│      └─resources</span><br><span class="line">│          │  application.yml</span><br><span class="line">│          │</span><br><span class="line">│          ├─<span class="keyword">static</span></span><br><span class="line">│          └─templates</span><br><span class="line">└─target</span><br><span class="line">    │  demo<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar</span><br><span class="line">    │  demo<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar.original</span><br><span class="line">    │</span><br><span class="line">    ├─classes</span><br><span class="line">    │  │  application.yml</span><br><span class="line">    │  │</span><br><span class="line">    │  └─blog</span><br><span class="line">    │      └─demo</span><br><span class="line">    │          │  Demo9Application<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    │          │</span></span><br><span class="line"><span class="class">    │          └─<span class="title">controller</span></span></span><br><span class="line"><span class="class">    │                  <span class="title">TestController</span>.<span class="title">class</span></span></span><br></pre></td></tr></table></figure>

<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><ul>
<li><em>application.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#应用程序上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Dockerfile</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#从docker仓库中获取基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span>  openjdk:<span class="number">8</span></span><br><span class="line"><span class="comment">#用于执行后面跟着的命令行命令</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /app</span></span><br><span class="line"><span class="comment">#设置时区</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'Asia/Shanghai'</span> &gt;/etc/timezone</span></span><br><span class="line"><span class="comment">#指定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="comment">#自动复制并解压到 &lt;目标路径&gt;</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/demo-0.0.1-SNAPSHOT.jar /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"java"</span>, <span class="string">"-Djava.security.egd=file:/dev/./urandom"</span>, <span class="string">"-jar"</span>,<span class="string">"/app/demo-0.0.1-SNAPSHOT.jar"</span>]</span></span><br><span class="line"><span class="comment">#暴露端口,建议与项目端口一致</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8088</span></span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>建立一个测试<em>TestController</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/30. 2:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getDocker"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getDocker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"这是Docker运行的"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>将项目打包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure>

<p>在<em>Dockerfile</em>文件的FROM左边有个绿色三角形按钮，右键选第三个<em>Edit 项目名/Dockerfile</em>编辑，下面为命令预留为命令预览</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200330040653.jpg" alt="Dockerfile编辑示例图"></p>
<p>然后点击<em>Run</em>构造日志如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Deploying 'blog-demo Dockerfile: demo-9/Dockerfile'...</span><br><span class="line">Building image...</span><br><span class="line">Preparing build context archive...</span><br><span class="line">[==================================================&gt;]25/25 files</span><br><span class="line">Done</span><br><span class="line"></span><br><span class="line">Sending build context to Docker daemon...</span><br><span class="line">[==================================================&gt;] 15.75MB</span><br><span class="line">Done</span><br><span class="line"></span><br><span class="line">Step 1/6 : FROM  openjdk:8</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cdf26cc71b50</span></span><br><span class="line">Step 2/6 : RUN mkdir /app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 10e8ac4d865c</span></span><br><span class="line">Step 3/6 : WORKDIR /app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Using cache</span></span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5ffbf5721544</span></span><br><span class="line">Step 4/6 : ADD target/demo-0.0.1-SNAPSHOT.jar /app</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f67886234b1b</span></span><br><span class="line">Step 5/6 : ENTRYPOINT ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar","/app/demo-0.0.1-SNAPSHOT.jar"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> b3950ecb0cb2</span></span><br><span class="line">Removing intermediate container b3950ecb0cb2</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e24d3684238c</span></span><br><span class="line">Step 6/6 : EXPOSE 8088</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 87357b53c4e1</span></span><br><span class="line">Removing intermediate container 87357b53c4e1</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 262109d9ae3f</span></span><br><span class="line"></span><br><span class="line">Successfully built 262109d9ae3f</span><br><span class="line">Successfully tagged docker-test:latest</span><br><span class="line">Creating container...</span><br><span class="line">Container Id: f18396a38fbee9c65372c9dc86adb726d9e60305da48202c25bcbd387134690d</span><br><span class="line">Container name: 'blog-demo'</span><br><span class="line">Attaching to container 'blog-demo'...</span><br><span class="line">Starting container 'blog-demo'</span><br><span class="line">'blog-demo Dockerfile: demo-9/Dockerfile' has been deployed successfully.</span><br></pre></td></tr></table></figure>

<p>回到Linux访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# curl localhost:8081/blog/getDocker</span><br><span class="line">这是Docker运行的</span><br><span class="line">[root@lujian ~]# curl localhost:8088/blog/getDocker</span><br><span class="line">curl: (7) Failed to connect to ::1: No route to host</span><br></pre></td></tr></table></figure>

<p>图解</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200330041346.png" alt="运行访问图解"></p>
<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-9" target="_blank" rel="noopener">源码链接</a></p>
          </div>]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>JAVA</tag>
        <tag>集成</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令</title>
    <url>/archives/7569/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Docker常用命令</p>
          </div> 

<a id="more"></a>

<ul>
<li>查看正在运行的容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">f18396a38fbe        262109d9ae3f        "java -Djava.securit…"   8 minutes ago       Up 8 minutes        0.0.0.0:8081-&gt;8088/tcp   blog-demo</span><br></pre></td></tr></table></figure>

<ul>
<li>查看所有容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                         PORTS                    NAMES</span><br><span class="line">f18396a38fbe        262109d9ae3f        "java -Djava.securit…"   8 minutes ago       Up 8 minutes                   0.0.0.0:8081-&gt;8088/tcp   blog-demo</span><br><span class="line">3dc9902f41fb        hello-world         "/hello"                 4 days ago          Exited (0) About an hour ago                            pensive_hypatia</span><br></pre></td></tr></table></figure>

<ul>
<li>停止容器(后面是<em>CONTAINER ID</em>)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop f18396a38fbe</span><br></pre></td></tr></table></figure>

<ul>
<li>启动容器(后面是<em>CONTAINER ID</em>)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker start f18396a38fbe</span><br></pre></td></tr></table></figure>

<ul>
<li>删除容器(后面是<em>CONTAINER ID</em>)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# docker rm 3dc9902f41fb</span><br><span class="line">3dc9902f41fb</span><br></pre></td></tr></table></figure>

<ul>
<li><p>进入容器</p>
<p>docker attach(如果从这个容器退出，会导致容器的停止。)</p>
<p>docker exec</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker attach f18396a38fbe</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it f18396a38fbe</span><br></pre></td></tr></table></figure>

<ul>
<li>杀死正在运行的容器(后面是<em>CONTAINER ID</em>)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker kill f18396a38fbe</span><br></pre></td></tr></table></figure>

<ul>
<li>查看容器log</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs f18396a38fbe</span><br></pre></td></tr></table></figure>

<ul>
<li>查看docker版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>

<ul>
<li>查看本地镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker-test         latest              262109d9ae3f        21 minutes ago      527MB</span><br><span class="line">&lt;none&gt;              &lt;none&gt;              c67df8295eed        55 minutes ago      527MB</span><br><span class="line">openjdk             8                   cdf26cc71b50        4 weeks ago         510MB</span><br><span class="line">hello-world         latest              fce289e99eb9        15 months ago       1.84kB</span><br></pre></td></tr></table></figure>

<ul>
<li>删除镜像(后面为IMAGE ID)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# docker rmi c67df8295eed</span><br><span class="line">Deleted: sha256:c67df8295eed75962ab8c713747ee8b0bf241cfa317438f5d8bef6ff44e0fd70</span><br><span class="line">Deleted: sha256:856be023fbc777ed13e6ba39b4528bcf88d98f0d1725e25fffbbff0c06031fc4</span><br><span class="line">Deleted: sha256:d8e35ae9563a9af1fb2c10eaa63e57b2921e51bc4734752e434de59adab3571c</span><br><span class="line">Deleted: sha256:221406b6bbba053a9f5086012c89744d245ed94ea50a5c82e3da1ef37b922241</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/archives/7065/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>版本控制系统Git一些常用命令</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Git:  2.25.1.windows.1</li></ul>
          </div>

<h6 id="创建版本仓库"><a href="#创建版本仓库" class="headerlink" title="创建版本仓库"></a>创建版本仓库</h6><ul>
<li>进入创建的指定目录执行初始化</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<h6 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h6><ul>
<li>显示暂存区的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<ul>
<li>提交至暂存区</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 文件名</span><br></pre></td></tr></table></figure>

<ul>
<li>暂存区添加至工作区(本地库)，暂存区清净</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m "提交说明"</span><br></pre></td></tr></table></figure>

<h6 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h6><ul>
<li>查看历史提交</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log</span><br><span class="line">ommit 783f8c959237131d9d85b58f8efc18691d2849a7 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: chenluby &lt;2234588720@qq.com&gt;</span><br><span class="line">Date:   Fri Mar 27 00:04:01 2020 +0800</span><br><span class="line"></span><br><span class="line">    备份</span><br><span class="line">commit 57372ad37936eb70134b40d63be92c46679bb53c</span><br><span class="line">Author: chenluby &lt;2234588720@qq.com&gt;</span><br><span class="line">Date:   Wed Mar 25 19:42:56 2020 +0800</span><br><span class="line"></span><br><span class="line">    备份</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">缩略信息使用</span></span><br><span class="line">git log --pretty=oneline</span><br><span class="line">783f8c959237131d9d85b58f8efc18691d2849a7 (HEAD -&gt; master, origin/master, origin/HEAD) 备份</span><br><span class="line">57372ad37936eb70134b40d63be92c46679bb53c 备份</span><br><span class="line">96b610fcb87eb55191aab4653baa9e38ef499584 备份</span><br><span class="line"><span class="meta">#</span><span class="bash">只列出提交的id和提交说明</span></span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">* 783f8c9 (HEAD -&gt; master, origin/master, origin/HEAD) 备份</span><br><span class="line">* 57372ad 备份</span><br><span class="line">* 96b610f 备份</span><br></pre></td></tr></table></figure>

<ul>
<li>接着查询历史提交id</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reflog</span><br><span class="line">783f8c9 (HEAD -&gt; master, origin/master, origin/HEAD) HEAD@&#123;0&#125;: commit: 备份</span><br><span class="line">57372ad HEAD@&#123;2&#125;: commit: 备份</span><br><span class="line">96b610f HEAD@&#123;3&#125;: commit: 备份</span><br></pre></td></tr></table></figure>

<ul>
<li>回退到上一版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard head^</span><br></pre></td></tr></table></figure>

<ul>
<li>回退到指定版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard  提交id</span><br></pre></td></tr></table></figure>

<h6 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h6><ul>
<li>如果已在暂存区先执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --head 文件名</span><br></pre></td></tr></table></figure>

<ul>
<li>接着执行撤销(前提是没有提交到远程仓库)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure>

<p>显示暂存区的文件时文件名绿色表示在暂存区未提交(需要执行<em>git reset –head 文件名</em>)，红色表示可撤销修改</p>
<h6 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h6><ul>
<li>只能在工作区(本地库)才可以执行删除文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm 文件名</span><br></pre></td></tr></table></figure>

<ul>
<li>当查看暂存区的文件时显示被删除的文件(显示绿色)，添加至工作区执行下面命令将彻底删除</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git commit -m "删除"</span><br></pre></td></tr></table></figure>

<ul>
<li>撤销删除</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -- 文件名</span><br></pre></td></tr></table></figure>

<h6 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h6><ul>
<li>生成密钥,将在系统登录账号名下的.ssh文件夹下生成的<em>id_rsa.pub</em>文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rse -C "邮箱地址"</span><br></pre></td></tr></table></figure>

<ul>
<li>接着执行(<em>origin</em>可以改)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote add origin git@xx.com:xx账户名/仓库名</span><br></pre></td></tr></table></figure>

<ul>
<li>第一次使用时可以将本地仓库推送至远程仓库(<em>origin</em>和上面一致)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>推送至远程仓库,只有工作区(本地库)的才能推送,<em>origin</em>和上面一致，<em>master</em>为分支名称</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h6 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@xx.com:账户名/仓库名</span><br></pre></td></tr></table></figure>

<h6 id="普通分支管理"><a href="#普通分支管理" class="headerlink" title="普通分支管理"></a>普通分支管理</h6><ul>
<li>创建分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>查看当前分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>

<ul>
<li>从当前分支切换至新的分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>创建并切换分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>合并某分支到当前分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>删除分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -d 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>合并分支后执行删除分支不会丢失分支信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git merge --no-ff -m ""</span><br></pre></td></tr></table></figure>

<h6 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h6><ul>
<li>查看冲突(会显示红色的文件即是有冲突的，需要手动修改)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>下面是文件冲突说明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">本地库代码范围</span><br><span class="line">=======</span><br><span class="line">刚刚pull下来的远程库代码范围</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>解决冲突</li>
</ul>
<p>当上面文件手动修改后，分别执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "解决冲突"</span><br></pre></td></tr></table></figure>

<ul>
<li>查看分支合并图</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git log --graph</span><br></pre></td></tr></table></figure>

<h6 id="bug分支"><a href="#bug分支" class="headerlink" title="bug分支"></a>bug分支</h6><ul>
<li>首先执行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 文件名称</span><br><span class="line"><span class="meta">#</span><span class="bash">将工作现场存储起来(类似VM虚拟机的快照功能)</span></span><br><span class="line">git stash</span><br></pre></td></tr></table></figure>

<ul>
<li>新建临时分支并切换到临时分支</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b 分支名称</span><br></pre></td></tr></table></figure>

<p>修复完成后,切换到master,合并删除临时分支，删除临时分支(只有合并才能删除)</p>
<ul>
<li>查看工作现场</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git stash list</span><br></pre></td></tr></table></figure>

<ul>
<li>恢复工作现场(工作现场未删除)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash apply</span><br></pre></td></tr></table></figure>

<ul>
<li>删除工作现场</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash drop</span><br></pre></td></tr></table></figure>

<ul>
<li>如果直接执行下面命令，恢复的同时也把stash删除</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure>

<h6 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h6><ul>
<li>新建分支修改内容</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add 分支名称</span><br><span class="line">git commit -m ""</span><br></pre></td></tr></table></figure>

<ul>
<li>分支未合并进行分支强行删除</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch -D 分支名称</span><br></pre></td></tr></table></figure>

<h6 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h6><ul>
<li>查看远程仓库详细信息(如果没有推送权限就看不到push 的地址)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<ul>
<li>推送分支(<em>origin</em>和上面一致，<em>master</em>为分支名称)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>伙伴通过clone时，只能看到 master ，如果需要在开发其它分支执行 </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout -b 本地分支名称 origin/远程分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>如遇冲突先</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/远程分支名称 本地分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>处理冲突</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull</span><br><span class="line">git add .</span><br><span class="line">git commit -m "解决冲突"</span><br></pre></td></tr></table></figure>

<ul>
<li>解决合并冲突后</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin 分支名称</span><br></pre></td></tr></table></figure>

<ul>
<li>如果<em>git pull</em>提示<em>no tracking information</em>，则说明本地分支和远程分支的链接关系没有创建，用命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to 本地分支名称 origin/&lt;远程分支名称&gt;</span><br></pre></td></tr></table></figure>

<h6 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h6><ul>
<li><p>rebase操作可以把本地未push的分叉提交历史整理成直线；</p>
</li>
<li><p>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</p>
</li>
</ul>
<h6 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h6><ul>
<li>创建一个标签信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag 标签信息</span><br></pre></td></tr></table></figure>

<ul>
<li>对历史提交创建标签</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tab 标签信息 提交id</span><br></pre></td></tr></table></figure>

<ul>
<li>查看标签</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tab</span><br></pre></td></tr></table></figure>

<ul>
<li>查看指定版本的标签</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git show 标签信息</span><br></pre></td></tr></table></figure>

<ul>
<li>删除指定标签</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -d 标签信息</span><br></pre></td></tr></table></figure>

<ul>
<li>删除远程标签(先从本地删除，然后执行下面命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin:refs/tags/标签信息</span><br></pre></td></tr></table></figure>

<ul>
<li>推送指定标签到远程仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin 标签信息</span><br></pre></td></tr></table></figure>

<ul>
<li>推送所有未推送过的标签至远程仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure>

<h6 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h6><ul>
<li>编辑<em>.gitignore</em>文件</li>
</ul>
<ol>
<li><p>忽略单个文件     文件名+后缀</p>
</li>
<li><p>忽略指定后缀     *.后缀</p>
</li>
<li><p>忽略的文件不能执行 <em>git add 文件名称</em>。强制执行</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add -f 文件名称</span><br></pre></td></tr></table></figure>

<ul>
<li>检查忽略规则</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git check-ignore -v 文件名称</span><br></pre></td></tr></table></figure>

<h6 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global alias.别名 git关键字</span><br></pre></td></tr></table></figure>

<h6 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h6><ul>
<li>同步代码时建议按以下顺序操作(<em>origin</em>和上面一致，<em>master</em>为分支名称)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "提交说明"</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>查看是否有冲突</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看暂存区的文件，显示红色为冲突</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure>

<ul>
<li>有冲突手动解决后执行下面命令，无冲突可忽略。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m "解决冲突"</span><br></pre></td></tr></table></figure>

<ul>
<li>最后同步(<em>origin</em>和上面一致，<em>master</em>为分支名称)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><div class="note info">
            <p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">廖雪峰的官方网站-Git教程</a></p>
          </div> ]]></content>
      <categories>
        <category>案例</category>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>版本控制</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用命令</title>
    <url>/archives/41388/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>MySQL常用命令</p>
          </div> 

<a id="more"></a>

<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><div class="note warning no-icon">
            <ul><li>MySQL:5.6.43</li></ul>
          </div>

<h5 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h5><h6 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h6><p>下面创建一个名为test_blog的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE test_blog</span><br></pre></td></tr></table></figure>

<h6 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h6><p>下面删除一个名为test_blog的数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE test_blog</span><br></pre></td></tr></table></figure>

<h6 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h6><p>下面创建一个<em>student_user</em>，<em>PRIMARY KEY</em>后面指定主键最后一个不用逗号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &#96;student_user&#96;  (</span><br><span class="line">  &#96;su_id&#96; int(10) UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;su_name&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">  &#96;su_sex&#96; int(2) NOT NULL COMMENT &#39;0女1男&#39;,</span><br><span class="line">  &#96;su_date&#96; date NULL DEFAULT NULL COMMENT &#39;出生年月&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;su_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Compact;</span><br></pre></td></tr></table></figure>

<h6 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h6><p>下面删除一个名为<em>student_user</em>的表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE student_user</span><br></pre></td></tr></table></figure>

<h6 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h6><p>格式为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO student_user (字段名1, 字段名2)  VALUES (第一条数据的值1, 第一条数据的值2),(第二条数据的值1, 第二条数据的值2);</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT INTO student_user (su_name, su_sex)  VALUES (&quot;小陈&quot;, 1),(&quot;小红&quot;, 0);</span><br></pre></td></tr></table></figure>

<h6 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h6><p>删除主键(su_id)为1的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE FROM student_user WHERE su_id&#x3D;1</span><br></pre></td></tr></table></figure>

<h6 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h6><p>修改主键(su_id)为1的出生年月为<em>1949-10-01</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE student_user SET su_date&#x3D;&quot;1949-10-01&quot; WHERE su_id&#x3D;1</span><br></pre></td></tr></table></figure>

<h6 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h6><p>查询为男性的姓名,尽量返回指定列，不返回*</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_name FROM student_user AS su WHERE su.su_sex&#x3D;1</span><br></pre></td></tr></table></figure>

<h5 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h5><h6 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h6><p>查询含有“小”字的主键,%可以只有一个，%为通配符。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_id FROM student_user AS su WHERE su.su_name LIKE &#39;%小%&#39;</span><br></pre></td></tr></table></figure>

<h6 id="合并查询-UNION"><a href="#合并查询-UNION" class="headerlink" title="合并查询(UNION)"></a>合并查询(UNION)</h6><p>两个结果集去重:(结果只有一个),<em>UNION</em> 操作符已经删除了重复数据(即<em>UNION<em>和</em>UNION DISTINCT</em> 结果一样)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_name FROM student_user AS su WHERE su_id&#x3D;1</span><br><span class="line">UNION DISTINCT</span><br><span class="line">SELECT su.su_name FROM student_user AS su WHERE su_id&#x3D;1</span><br></pre></td></tr></table></figure>

<p>两个结果不去重:(结果有两个)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_name FROM student_user AS su WHERE su_id&#x3D;1</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT su.su_name FROM student_user AS su WHERE su_id&#x3D;1</span><br></pre></td></tr></table></figure>

<h6 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h6><ul>
<li>DESC(降序)</li>
<li>ASC(升序，默认的)</li>
</ul>
<p>例如需要查询年龄较小的，即出生日期比较大，将出生日期降序查询，如下：<em>ORDER BY</em> 字段名 <em>DESC</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_date FROM student_user AS su ORDER BY su.su_date DESC</span><br></pre></td></tr></table></figure>

<h6 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h6><p>可以使用 COUNT, SUM, AVG,等函数</p>
<p>查询每个性别的人数如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_sex,COUNT(*) FROM student_user AS su GROUP BY su.su_sex</span><br></pre></td></tr></table></figure>

<h6 id="连接查询-JOIN"><a href="#连接查询-JOIN" class="headerlink" title="连接查询(JOIN)"></a>连接查询(JOIN)</h6><ul>
<li>INNER JOIN（内连接,或等值连接）：获取两个表中字段匹配关系的记录。</li>
<li>LEFT JOIN（左连接）：获取左表所有记录，即使右表没有对应匹配的记录。</li>
<li>RIGHT JOIN（右连接）： 与 LEFT JOIN 相反，用于获取右表所有记录，即使左表没有对应匹配的记录。</li>
</ul>
<p>插入测试数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for score</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;score&#96;;</span><br><span class="line">CREATE TABLE &#96;score&#96;  (</span><br><span class="line">  &#96;s_id&#96; int(10) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  &#96;s_course&#96; varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT &#39;科目名&#39;,</span><br><span class="line">  &#96;s_scores&#96; float(4, 1) NULL DEFAULT NULL COMMENT &#39;分数&#39;,</span><br><span class="line">  &#96;su_id&#96; int(10) NULL DEFAULT NULL COMMENT &#39;学生id(参考student_id表主键)&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;s_id&#96;, &#96;s_course&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 7 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_general_ci ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of score</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (1, &#39;JAVA&#39;, 81.5, 1);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (2, &#39;MySQL&#39;, 67.0, 1);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (3, &#39;JAVA&#39;, 66.0, 2);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (4, &#39;MySQL&#39;, NULL, 2);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (5, &#39;JAVA&#39;, 69.0, 4);</span><br><span class="line">INSERT INTO &#96;score&#96; VALUES (6, &#39;MySQL&#39;, 80.0, 4);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<p>当需要查询学生的科目成绩时。两个表可以转换位置，但为了遵循小表驱动大表，所以把<em>student_user</em>放前面了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_name,sc.s_course,IFNULL(sc.s_scores,0) AS s_scores FROM student_user AS su INNER JOIN score AS sc ON su.su_id&#x3D;sc.su_id</span><br></pre></td></tr></table></figure>

<p>结果如下，小红没有<em>MYSQL</em>成绩，所以需要<em>IFNULL</em>填充0</p>
<table>
<thead>
<tr>
<th align="center">su_name</th>
<th align="center">s_course</th>
<th align="center">s_scores</th>
</tr>
</thead>
<tbody><tr>
<td align="center">小陈</td>
<td align="center">JAVA</td>
<td align="center">81.5</td>
</tr>
<tr>
<td align="center">小陈</td>
<td align="center">MySQL</td>
<td align="center">67.0</td>
</tr>
<tr>
<td align="center">小红</td>
<td align="center">JAVA</td>
<td align="center">66.0</td>
</tr>
<tr>
<td align="center">小红</td>
<td align="center">MySQL</td>
<td align="center">0.0</td>
</tr>
<tr>
<td align="center">小明</td>
<td align="center">JAVA</td>
<td align="center">69.0</td>
</tr>
<tr>
<td align="center">小明</td>
<td align="center">MySQL</td>
<td align="center">80.0</td>
</tr>
</tbody></table>
<h6 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h6><p>当我们想显示如下格式的时候。这个概念叫做行转列。</p>
<table>
<thead>
<tr>
<th align="center">姓名</th>
<th align="center">JAVA</th>
<th align="center">MYSQL</th>
</tr>
</thead>
<tbody><tr>
<td align="center">小陈</td>
<td align="center">81.5</td>
<td align="center">67.0</td>
</tr>
<tr>
<td align="center">……</td>
<td align="center">……</td>
<td align="center">……</td>
</tr>
</tbody></table>
<p>SQL脚本如下：如果整合的是姓名，则按他的主键分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT su.su_name,</span><br><span class="line">MAX(CASE sc.s_course WHEN &#39;JAVA&#39; THEN  s_scores  ELSE 0 END ) AS JAVA,</span><br><span class="line">MAX(CASE sc.s_course WHEN &#39;MYSQL&#39; THEN   s_scores  ELSE 0 END ) AS MYSQL</span><br><span class="line">FROM student_user AS su INNER JOIN score AS sc ON su.su_id&#x3D;sc.su_id </span><br><span class="line">GROUP BY su.su_id</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SQL</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot集成RocketMQ</title>
    <url>/archives/55008/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>SpringBoot集成RocketMQ</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li><li>RocketMQ: 4.7.0</li></ul>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─blog</span><br><span class="line">│  │  │      └─demo</span><br><span class="line">│  │  │          │  DemoApplication.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─controller</span><br><span class="line">│  │  │          │      TestController.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─service</span><br><span class="line">│  │  │              │  ProviderService.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              └─impl</span><br><span class="line">│  │  │                  │  ProviderServiceImpl.java</span><br><span class="line">│  │  │                  │</span><br><span class="line">│  │  │                  └─send</span><br><span class="line">│  │  │                          AsyncSendImpl.java</span><br><span class="line">│  │  │                          ConvertAndSendImpl.java</span><br><span class="line">│  │  │                          SendOneWayImpl.java</span><br><span class="line">│  │  │                          SyncSendImpl.java</span><br><span class="line">│  │  │                          SyncSendOrderlyImpl.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      │  application<span class="literal">-local</span>.yml</span><br><span class="line">│  │      │  application.yml</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─<span class="keyword">static</span></span><br><span class="line">│  │      └─templates</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─blog</span><br><span class="line">│              └─demo</span><br><span class="line">│                      DemoApplicationTests.java</span><br></pre></td></tr></table></figure>



<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--rocketmq--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.rocketmq/rocketmq-spring-boot-starter --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--省略get/set等方法--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>为了区分多环境，分别创建了<em>application.yml</em>和<em>application-local.yml</em>文件</p>
<ul>
<li><em>application.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8087</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#应用程序上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br><span class="line"><span class="comment">#应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">blog-mq-demo8</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#指定环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>application-local.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">consumer-demo-1</span></span><br><span class="line">  <span class="comment">#mq的nameserver地址</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span></span><br></pre></td></tr></table></figure>

<h6 id="生产者业务类"><a href="#生产者业务类" class="headerlink" title="生产者业务类"></a>生产者业务类</h6><p>在service包创建<em>ProviderService</em>接口。以下列举了部分消息类型，详细参考官方文档。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者业务类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/28. 23:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProviderService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功，false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">convertAndSend</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SendResult <span class="title">syncSend</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送即时消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功，false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">sendOneWay</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送顺序消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">SendResult <span class="title">syncSendOrderly</span><span class="params">(String msg)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送异步消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  true成功，false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">asyncSend</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建<em>ProviderService<em>实现类</em>ProviderServiceImpl</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.demo.service.ProviderService;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendCallback;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.client.producer.SendResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.MessageBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/28. 23:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProviderService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功，false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">convertAndSend</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rocketMQTemplate.convertAndSend(<span class="string">"ConvertAndSend"</span>, msg);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功，false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendResult <span class="title">syncSend</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        SendResult sendResult = rocketMQTemplate.syncSend(<span class="string">"SyncSend"</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> sendResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送即时消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendOneWay</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rocketMQTemplate.sendOneWay(<span class="string">"SendOneWay"</span>, msg);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送顺序消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SendResult <span class="title">syncSendOrderly</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rocketMQTemplate.syncSendOrderly(<span class="string">"SyncSendOrderly"</span>, msg, <span class="string">"code-inn.gitee.io"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送异步消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 消息内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功，false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">asyncSend</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rocketMQTemplate.asyncSend(<span class="string">"AsyncSend"</span>, MessageBuilder.withPayload(msg).build(), <span class="keyword">new</span> SendCallback() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>&#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="消费者业务类"><a href="#消费者业务类" class="headerlink" title="消费者业务类"></a>消费者业务类</h6><p>所有业务类实现<em>RocketMQListener*加上注解</em>@RocketMQMessageListener*  即可。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.service.impl.send;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.annotation.RocketMQMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.apache.rocketmq.spring.core.RocketMQListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/28. 23:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RocketMQMessageListener</span>(topic = <span class="string">"ConvertAndSend"</span>, consumerGroup = <span class="string">"ConvertAndSend"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertAndSendImpl</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"ConvertAndSendImpl:&#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用生产者方法<em>ProviderServiceImpl</em>的<em>convertAndSend</em>方法时，上面的<em>topic</em>的ConvertAndSend就会接受到信息。注意<em>topic</em>的<strong><em>ConvertAndSend</em></strong>和<em>ProviderServiceImpl</em>的<em>convertAndSend</em>方法rocketMQTemplate.convertAndSend(“<strong><em>ConvertAndSend</em></strong>“, msg);是对应的。</p>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>创建测试<em>TestController</em> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.demo.service.ProviderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/28. 15:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProviderService providerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getConvertAndSend"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getConvertAndSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerService.convertAndSend(<span class="string">"getConvertAndSend"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getSyncSend"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSyncSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerService.syncSend(<span class="string">"getSyncSend"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getSendOneWay"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSendOneWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerService.sendOneWay(<span class="string">"getSendOneWay"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getSyncSendOrderly"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSyncSendOrderly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerService.syncSendOrderly(<span class="string">"getSyncSendOrderly"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getAsyncSend"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getAsyncSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerService.asyncSend(<span class="string">"getAsyncSend"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当我们向<em>getConvertAndSend</em>接口发起请求时，日志打印如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200329143619.png" alt="日志详细说明"></p>
<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-8" target="_blank" rel="noopener">源码链接</a></p>
          </div>]]></content>
      <categories>
        <category>案例</category>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
        <tag>案例</tag>
        <tag>集成</tag>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列RocketMQ安装</title>
    <url>/archives/16794/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Centos7和Window环境下安装消息队列RocketMQ</p>
          </div> 

<a id="more"></a>

<h5 id="Linux端"><a href="#Linux端" class="headerlink" title="Linux端"></a>Linux端</h5><h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>CentOS :7.7.1908</li><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>RocketMQ :4.7.0</li></ul>
          </div>

<h6 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h6><div class="note default">
            <p>下载地址<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/" target="_blank" rel="noopener">进入选择版本</a></p>
          </div>

<p>选版本后下载后缀为<em>xx-source-release.zip<em>的文件，例如我的为</em>rocketmq-all-4.7.0-source-release.zip</em></p>
<p>上传到<em>/usr/local/rocketmq</em>文件夹执行下面命令解压呀</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian rocketmq]# unzip rocketmq-all-4.7.0-source-release.zip</span><br></pre></td></tr></table></figure>

<p>进入到解压目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian rocketmq]# cd rocketmq-all-4.7.0-source-release</span><br></pre></td></tr></table></figure>

<p>进入到clone目录<em>/usr/local/rocketmq/rocketmq</em>执行(编译部署)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -Prelease-all -DskipTests clean install -U</span><br></pre></td></tr></table></figure>

<p>编译成功后会显示一列列<em>rocketmq-xxx……………………….. SUCCESS</em>如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ar.gz</span><br><span class="line">[INFO] Installing /usr/local/rocketmq/rocketmq-all-4.7.0-source-release/distribution/target/rocketmq-4.7.0.zip to /root/.m2/repository/org/apache/rocketmq/rocketmq-distribution/4.7.0/rocketmq-distribution-4.7.0.zip</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Summary for Apache RocketMQ 4.7.0 4.7.0:</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] Apache RocketMQ 4.7.0 .............................. SUCCESS [  6.471 s]</span><br><span class="line">[INFO] rocketmq-logging 4.7.0 ............................. SUCCESS [  6.136 s]</span><br><span class="line">[INFO] rocketmq-remoting 4.7.0 ............................ SUCCESS [  5.241 s]</span><br><span class="line">[INFO] rocketmq-common 4.7.0 .............................. SUCCESS [  8.803 s]</span><br><span class="line">[INFO] rocketmq-client 4.7.0 .............................. SUCCESS [  9.788 s]</span><br><span class="line">[INFO] rocketmq-store 4.7.0 ............................... SUCCESS [  6.001 s]</span><br><span class="line">[INFO] rocketmq-srvutil 4.7.0 ............................. SUCCESS [  1.138 s]</span><br><span class="line">[INFO] rocketmq-filter 4.7.0 .............................. SUCCESS [  2.378 s]</span><br><span class="line">[INFO] rocketmq-acl 4.7.0 ................................. SUCCESS [  1.899 s]</span><br><span class="line">[INFO] rocketmq-broker 4.7.0 .............................. SUCCESS [  6.506 s]</span><br><span class="line">[INFO] rocketmq-tools 4.7.0 ............................... SUCCESS [  4.108 s]</span><br><span class="line">[INFO] rocketmq-namesrv 4.7.0 ............................. SUCCESS [  1.787 s]</span><br><span class="line">[INFO] rocketmq-logappender 4.7.0 ......................... SUCCESS [  1.218 s]</span><br><span class="line">[INFO] rocketmq-openmessaging 4.7.0 ....................... SUCCESS [  1.407 s]</span><br><span class="line">[INFO] rocketmq-example 4.7.0 ............................. SUCCESS [  2.124 s]</span><br><span class="line">[INFO] rocketmq-test 4.7.0 ................................ SUCCESS [  3.024 s]</span><br><span class="line">[INFO] rocketmq-distribution 4.7.0 ........................ SUCCESS [  9.909 s]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time:  01:18 min</span><br><span class="line">[INFO] Finished at: 2020-03-25T18:28:11+08:00</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>



<p>进入到 <em>distribution/target/rocketmq-4.7.0/rocketmq-4.7.0</em> 文件夹。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian rocketmq-all-4.7.0-source-release]# cd distribution/target/rocketmq-4.7.0/rocketmq-4.7.0/</span><br><span class="line"><span class="meta">#</span><span class="bash">完成路径为</span></span><br><span class="line">[root@lujian rocketmq-4.7.0]# pwd</span><br><span class="line">/usr/local/rocketmq/rocketmq-all-4.7.0-source-release/distribution/target/rocketmq-4.7.0/rocketmq-4.7.0</span><br></pre></td></tr></table></figure>

<h6 id="启动-NameServer"><a href="#启动-NameServer" class="headerlink" title="启动 NameServer"></a>启动 NameServer</h6><p>分别执行下面命令，提示14行的字样即为成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">输入第2行和第5行即可</span></span><br><span class="line">[root@lujian rocketmq-4.7.0]# nohup sh bin/mqnamesrv &amp;</span><br><span class="line">[1] 708</span><br><span class="line">[root@lujian rocketmq-4.7.0]# nohup: ignoring input and appending output to ‘nohup.out’</span><br><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">2020-03-25 18:49:39 INFO main - tls.client.keyPassword = null</span><br><span class="line">2020-03-25 18:49:39 INFO main - tls.client.certPath = null</span><br><span class="line">2020-03-25 18:49:39 INFO main - tls.client.authServer = false</span><br><span class="line">2020-03-25 18:49:39 INFO main - tls.client.trustCertPath = null</span><br><span class="line">2020-03-25 18:49:39 INFO main - Using OpenSSL provider</span><br><span class="line">2020-03-25 18:49:40 INFO main - SSLContext created for server</span><br><span class="line">2020-03-25 18:49:40 INFO main - Try to start service thread:FileWatchService started:false lastThread:null</span><br><span class="line">2020-03-25 18:49:40 INFO NettyEventExecutor - NettyEventExecutor service started</span><br><span class="line">2020-03-25 18:49:40 INFO main - The Name Server boot success. serializeType=JSON</span><br><span class="line">2020-03-25 18:49:40 INFO FileWatchService - FileWatchService service started</span><br><span class="line">2020-03-25 18:50:40 INFO NSScheduledThread1 - --------------------------------------------------------</span><br><span class="line">2020-03-25 18:50:40 INFO NSScheduledThread1 - configTable SIZE: 0</span><br></pre></td></tr></table></figure>

<h6 id="启动-Broker"><a href="#启动-Broker" class="headerlink" title="启动 Broker"></a>启动 Broker</h6><p>分别输入下面命令，提示14行的字样即为成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第2和4行</span></span><br><span class="line">[root@lujian rocketmq-4.7.0]# nohup sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class="line">[2] 849</span><br><span class="line">[root@lujian rocketmq-4.7.0]# tail -f ~/logs/rocketmqlogs/broker.log</span><br><span class="line">2020-03-25 19:09:07 INFO main - Try to start service thread:FlushConsumeQueueService started:false lastThread:null</span><br><span class="line">2020-03-25 19:09:07 INFO main - Try to start service thread:FlushRealTimeService started:false lastThread:null</span><br><span class="line">2020-03-25 19:09:07 INFO main - Try to start service thread:StoreStatsService started:false lastThread:null</span><br><span class="line">2020-03-25 19:09:07 INFO main - Try to start service thread:FileWatchService started:false lastThread:null</span><br><span class="line">2020-03-25 19:09:07 INFO FileWatchService - FileWatchService service started</span><br><span class="line">2020-03-25 19:09:07 INFO main - Try to start service thread:PullRequestHoldService started:false lastThread:null</span><br><span class="line">2020-03-25 19:09:07 INFO PullRequestHoldService - PullRequestHoldService service started</span><br><span class="line">2020-03-25 19:09:07 INFO main - Try to start service thread:TransactionalMessageCheckService started:false lastThread:null</span><br><span class="line">2020-03-25 19:09:07 INFO brokerOutApi_thread_1 - register broker[0]to name server localhost:9876 OK</span><br><span class="line">2020-03-25 19:09:07 INFO main - The broker[lujian, 172.17.0.1:10911] boot success. serializeType=JSON and name server is localhost:9876</span><br><span class="line">2020-03-25 19:09:17 INFO BrokerControllerScheduledThread1 - dispatch behind commit log 0 bytes</span><br><span class="line">2020-03-25 19:09:17 INFO BrokerControllerScheduledThread1 - Slave fall behind master: 0 bytes</span><br><span class="line">2020-03-25 19:09:17 INFO brokerOutApi_thread_2 - register broker[0]to name server localhost:9876 OK</span><br><span class="line">2020-03-25 19:09:47 INFO brokerOutApi_thread_3 - register broker[0]to name server localhost:9876 OK</span><br><span class="line">2020-03-25 19:10:07 INFO TransactionalMessageCheckService - create new topic TopicConfig [topicName=RMQ_SYS_TRANS_HALF_TOPIC, readQueueNums=1, writeQueueNums=1, perm=RW-, topicFilterType=SINGLE_TAG, topicSysFlag=0, order=false]</span><br><span class="line">2020-03-25 19:10:07 INFO brokerOutApi_thread_4 - register broker[0]to name server localhost:9876 OK</span><br><span class="line">2020-03-25 19:10:17 INFO BrokerControllerScheduledThread1 - dispatch behind commit log 0 bytes</span><br><span class="line">2020-03-25 19:10:17 INFO BrokerControllerScheduledThread1 - Slave fall behind master: 0 bytes</span><br><span class="line">2020-03-25 19:10:17 INFO brokerOutApi_thread_1 - register broker[0]to name server localhost:9876 OK</span><br><span class="line">2020-03-25 19:10:47 INFO brokerOutApi_thread_2 - register broker[0]to name server localhost:9876 OK</span><br></pre></td></tr></table></figure>

<ul>
<li>如果输入下面的命令的时候</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure>

<p>没有显示<em>The Name Server boot success. serializeType=JSON</em>则可能内存不够，在以下路径设置即可。<em>runbroker.sh</em>和<em>runserver.sh</em>都需要修改，下面以<em>runserver.sh</em>为例。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200325185753.png" alt="内置设置"></p>
<h5 id="Window端"><a href="#Window端" class="headerlink" title="Window端"></a>Window端</h5><h6 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Window:10</li><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>Rocketmq :4.7.0</li><li>Git: 2.25.1.windows.1</li></ul>
          </div>

<h6 id="安装部署-1"><a href="#安装部署-1" class="headerlink" title="安装部署"></a>安装部署</h6><div class="note default">
            <p>下载地址<a href="http://rocketmq.apache.org/release_notes/" target="_blank" rel="noopener">进入选择版本</a></p>
          </div>

<p>选择一个你需要安装的版本后，下载后缀为<em>xx-bin-release.zip</em>,例如我的为rocketmq-all-4.7.0-bin-release.zip</p>
<ul>
<li>配置环境变量</li>
</ul>
<p>将解压的根目录<em>rocketmq</em>设置为环境变量，然后<strong>重启电脑</strong>(必须否则提示下面错误),设置参考路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200326022342.png" alt="环境变量参考图"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Please set the ROCKETMQ_HOME variable in your environment!</span><br></pre></td></tr></table></figure>

<ul>
<li>进入到解压目录<em>rocketmq\bin</em>执行下面命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start mqnamesrv.cmd</span><br></pre></td></tr></table></figure>

<p>如果输入命令后新的cmd窗口提示以下信息即成功（<em>The Name Server boot success. serializeType=JSON</em>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed in a future release</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed in a future release.</span><br><span class="line">The Name Server boot success. serializeType=JSON</span><br></pre></td></tr></table></figure>

<ul>
<li>上面提示的cmd窗口不能关闭，切回开始输入命令那个cmd窗口，执行下面的命令。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable&#x3D;true</span><br></pre></td></tr></table></figure>

<p>如果上面两个没有错误，正常显示如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200326023539.png" alt="成功图"></p>
<h6 id="安装rocketmq插件"><a href="#安装rocketmq插件" class="headerlink" title="安装rocketmq插件"></a>安装rocketmq插件</h6><p>在解压根目录打开一个Git Bath Here输入下面命令,会生成一个rocket-externals文件夹</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/apache/rocketmq-externals.git</span><br></pre></td></tr></table></figure>

<p>进入到<em>rocketmq-externals\rocketmq-console\src\main\resources</em>目录编辑配置文件<em>application.properties</em>，搜索<em>rocketmq.config.namesrvAddr=</em>在后面填写上面启动的地址<em>127.0.0.1:9876</em>，参考下面配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">rocketmq.config.namesrvAddr</span>=<span class="string">127.0.0.1:9876</span></span><br></pre></td></tr></table></figure>

<p>回到Git Bath Here进入到<em>rocketmq-externals\rocketmq-console</em>目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd rocketmq-externals/rocketmq-console/</span><br></pre></td></tr></table></figure>

<ul>
<li>然后编译项目</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>

<ul>
<li>编译成功之后回到Git Bath Here进入<em>target</em>文件夹执行下面命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-1.0.1.jar</span><br></pre></td></tr></table></figure>

<p>编译和启动日志图如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200326031708.png" alt="日志"></p>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>浏览器中输入<a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a>     这个端口是刚刚<em>application.properties</em>设置的，不是9876哦，成功后即可查看。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200326031723.png" alt="效果说明"></p>
<h6 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h6><ul>
<li>为了不用每次进入指定目录输入命令，下面设置启动<em>NAMESERVER</em>，<em>BROKER</em>和<em>可视化插件</em>的脚本</li>
</ul>
<p>在解压根目录进入<em>bin</em>目录新建<em>start.bat</em>文件，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start mqnamesrv.cmd  &amp;&amp; start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true &amp;&amp; java -jar ../rocketmq-externals/rocketmq-console/target/rocketmq-console-ng-1.0.1.jar</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong></p>
<ul>
<li>第一个&amp;&amp;前面为启动 <em>NAMESERVER</em>， </li>
<li>第二个&amp;&amp;前面为启动 <em>BROKER</em>，</li>
<li>第二个&amp;&amp;后面为启动<em>可视化插件</em></li>
</ul>
<p>(如果编译jar名不一致，请修改脚本，上述脚本是启动<em>rocketmq-console-ng-1.0.1.jar</em>包的。)</p>
<p>将<em>start.bat</em>发送到桌面快捷方式，以后就可以一键启动<em>NAMESERVER</em>，<em>BROKER</em>和<em>可视化插件</em>了</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><div class="note info">
            <p>Linux端 <a href="https://blog.csdn.net/wangmx1993328/article/details/81536168" target="_blank" rel="noopener">RocketMQ 安装详细说明</a></p><p>Window端<a href="https://www.jianshu.com/p/4a275e779afa" target="_blank" rel="noopener">windows下RocketMQ安装部署</a></p>
          </div>

]]></content>
      <categories>
        <category>案例</category>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>安装</tag>
        <tag>RocketMQ</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7安装Maven</title>
    <url>/archives/43191/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Centos7环境下安装Maven</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li><p>CentOS :7.7.1908</p></li><li><p>Maven :3.6.0 </p></li><li><p>Java version:1.8.0_201</p></li></ul>
          </div>

<h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><p>下载后使用MobaXterm上传到<em>/usr/local/maven/</em>文件夹下，没有这个文件夹可以自己新建</p>
<div class="note default">
            <p><a href="https://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz" target="_blank" rel="noopener">Maven3.6.3下载地址</a></p>
          </div>

<p>解压刚刚的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf apache-maven-3.6.3-bin.tar.gz</span><br></pre></td></tr></table></figure>

<h6 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h6><p>编辑 <em>/etc/profile</em> 文件，在文件末尾添加如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.3</span><br><span class="line">export PATH=$&#123;PATH&#125;:$&#123;MAVEN_HOME&#125;/bin</span><br></pre></td></tr></table></figure>

<h6 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h6><p>保存退出后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen ~]# source /etc/profile</span><br></pre></td></tr></table></figure>

<h6 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian ~]# mvn -v</span><br><span class="line">Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)</span><br><span class="line">Maven home: /usr/local/maven/apache-maven-3.6.3</span><br><span class="line">Java version: 1.8.0_201, vendor: Oracle Corporation, runtime: /usr/java/jdk1.8.0_201/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: "linux", version: "3.10.0-957.1.3.el7.x86_64", arch: "amd64", family: "unix"</span><br></pre></td></tr></table></figure>

<h6 id="配置阿里源"><a href="#配置阿里源" class="headerlink" title="配置阿里源"></a>配置阿里源</h6><p>在<em>/usr/local/maven/conf</em> 文件夹下打开<em>settings.xml</em>文件，搜索  &lt;/mirrors&gt;   在上面添加下面配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun.com<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
        <category>Maven</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Centos</tag>
        <tag>Maven</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>CA证书加密远程链接Docker</title>
    <url>/archives/11036/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>通过IDEA使用CA证书加密远程链接Docker</p>
          </div> 

<a id="more"></a>

<h6 id="创建ca文件夹"><a href="#创建ca文件夹" class="headerlink" title="创建ca文件夹"></a>创建ca文件夹</h6><p>创建ca文件夹，并进入到ca目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建</span></span><br><span class="line">mkdir -p /usr/local/ca</span><br><span class="line"><span class="meta">#</span><span class="bash">进入</span></span><br><span class="line">cd /usr/local/ca</span><br></pre></td></tr></table></figure>

<h6 id="创建key"><a href="#创建key" class="headerlink" title="创建key"></a>创建key</h6><p>需要输入密码和确认密码(终端输入是没有回显*的)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行第2行命令</span></span><br><span class="line">[root@chen ca]# openssl genrsa -aes256 -out ca-key.pem 4096</span><br><span class="line"></span><br><span class="line">Generating RSA private key, 4096 bit long modulus</span><br><span class="line">..............++</span><br><span class="line">............................................................++</span><br><span class="line">e is 65537 (0x10001)</span><br><span class="line"><span class="meta">#</span><span class="bash">输入密码和确认密码</span></span><br><span class="line">Enter pass phrase for ca-key.pem:</span><br><span class="line">Verifying - Enter pass phrase for ca-key.pem:</span><br></pre></td></tr></table></figure>

<h6 id="填写基本信息"><a href="#填写基本信息" class="headerlink" title="填写基本信息"></a>填写基本信息</h6><p>填写国家地区等信息，下面是一些信息填写参考。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">执行第2行命令</span></span><br><span class="line">[root@chen ca]# openssl req -new -x509 -days 365 -key ca-key.pem -sha256 -out ca.pem</span><br><span class="line"><span class="meta">#</span><span class="bash">第4行输入上一步设置的密码</span></span><br><span class="line">Enter pass phrase for ca-key.pem:</span><br><span class="line">You are about to be asked to enter information that will be incorporated</span><br><span class="line">into your certificate request.</span><br><span class="line">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class="line">There are quite a few fields but you can leave some blank</span><br><span class="line">For some fields there will be a default value,</span><br><span class="line">If you enter '.', the field will be left blank.</span><br><span class="line">-----</span><br><span class="line">Country Name (2 letter code) [XX]:CN</span><br><span class="line">State or Province Name (full name) []:Guangzhou</span><br><span class="line">Locality Name (eg, city) [Default City]:BaiYun</span><br><span class="line">Organization Name (eg, company) [Default Company Ltd]:code-inn.gitee.io</span><br><span class="line">Organizational Unit Name (eg, section) []:Docker</span><br><span class="line">Common Name (eg, your name or your server's hostname) []:hexo</span><br><span class="line">Email Address []:chenlujian2020@163.com</span><br></pre></td></tr></table></figure>

<p>执行完成上面两步后ca目录会产生两个文件，分别为<em>ck-key.pem</em>和<em>ca.pem</em>。</p>
<h6 id="生成server-key-pem"><a href="#生成server-key-pem" class="headerlink" title="生成server-key.pem"></a>生成server-key.pem</h6><p>执行成功后ca目录会生成<em>server-key.pem</em>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行第2行命令</span></span><br><span class="line">[root@chen ca]# openssl genrsa -out server-key.pem 4096</span><br><span class="line"></span><br><span class="line">Generating RSA private key, 4096 bit long modulus</span><br><span class="line">...........................................................................++</span><br><span class="line">.........................................................................................................................++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure>

<h6 id="绑定IP或者域名"><a href="#绑定IP或者域名" class="headerlink" title="绑定IP或者域名"></a>绑定IP或者域名</h6><p>$HOST 这个值，填写你的服务器外网IP 或者服务器外网域名，下面为格式，请勿直接执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -subj "/CN=$HOST" -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure>

<p>例如：绑定ip：47.106.80.224</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -subj "/CN=47.106.80.224" -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure>

<p>域名参考(未测试)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">openssl req -subj "/CN=www.baidu.com" -sha256 -new -key server-key.pem -out server.csr</span><br></pre></td></tr></table></figure>

<p>执行后会在ca目录生成一个<em>server.csr</em>文件</p>
<h6 id="配置白名单"><a href="#配置白名单" class="headerlink" title="配置白名单"></a>配置白名单</h6><p>$HOST 就是你上一步设置的那个 $HOST，下面为格式，请勿直接执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo subjectAltName = IP:$HOST,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure>

<p>例如：绑定的ip：47.106.80.224</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo subjectAltName = IP:47.106.80.224,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure>

<p>如果上一步设置的是域名参考(未测试)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo subjectAltName = DNS:$HOST,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure>

<h6 id="生成ca-key"><a href="#生成ca-key" class="headerlink" title="生成ca-key"></a>生成ca-key</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure>

<p>执行后会在ca目录生成一个<em>extfile.cnf</em>文件</p>
<p>执行命令，并输入密码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">2和3行为完整命令</span></span><br><span class="line">[root@chen ca]# openssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out server-cert.pem -extfile extfile.cnf</span><br><span class="line"><span class="meta">#</span><span class="bash">成功提示下面的信息</span></span><br><span class="line">Signature ok</span><br><span class="line">subject=/CN=47.106.80.224</span><br><span class="line">Getting CA Private Key</span><br><span class="line"><span class="meta">#</span><span class="bash">输入开始设置的密码</span></span><br><span class="line">Enter pass phrase for ca-key.pem:</span><br></pre></td></tr></table></figure>

<p>成功后ca目录会产生<em>server-cert.pem</em>文件</p>
<h6 id="生成客户端key-pem"><a href="#生成客户端key-pem" class="headerlink" title="生成客户端key.pem"></a>生成客户端key.pem</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行第2行命令</span></span><br><span class="line">[root@chen ca]# openssl genrsa -out key.pem 4096</span><br><span class="line">Generating RSA private key, 4096 bit long modulus</span><br><span class="linespan><br><span class="line">....................................................................................++</span><br><span class="line">e is 65537 (0x10001)</span><br></pre></td></tr></table></figure>

<p>执行成功后ca目录生成<em>key.pem</em>文件。</p>
<p>分别执行下面的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen ca]# openssl req -subj '/CN=client' -new -key key.pem -out client.csr</span><br><span class="line">[root@chen ca]# echo extendedKeyUsage = clientAuth &gt;&gt; extfile.cnf</span><br></pre></td></tr></table></figure>

<h6 id="生成cert-pem"><a href="#生成cert-pem" class="headerlink" title="生成cert.pem"></a>生成cert.pem</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">执行2和3行的完整命令</span></span><br><span class="line">[root@chen ca]# openssl x509 -req -days 365 -sha256 -in client.csr -CA ca.pem -CAkey ca-key.pem \-CAcreateserial -out cert.pem -extfile extfile.cnf</span><br><span class="line">Signature ok</span><br><span class="line">subject=/CN=client</span><br><span class="line">Getting CA Private Key</span><br><span class="line"><span class="meta">#</span><span class="bash">输入开始设置的密码</span></span><br><span class="line">Enter pass phrase for ca-key.pem:</span><br></pre></td></tr></table></figure>

<p>执行成功后ca目录生成<em>cert.pem</em>文件。</p>
<h6 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h6><p>分别执行下面命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen ca]# chmod -v 0400 ca-key.pem key.pem server-key.pem</span><br><span class="line">mode of ‘ca-key.pem’ changed from 0644 (rw-r--r--) to 0400 (r--------)</span><br><span class="line">mode of ‘key.pem’ changed from 0644 (rw-r--r--) to 0400 (r--------)</span><br><span class="line">mode of ‘server-key.pem’ changed from 0644 (rw-r--r--) to 0400 (r--------)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen ca]# chmod -v 0444 ca.pem server-cert.pem cert.pem</span><br><span class="line">mode of ‘ca.pem’ changed from 0644 (rw-r--r--) to 0444 (r--r--r--)</span><br><span class="line">mode of ‘server-cert.pem’ changed from 0644 (rw-r--r--) to 0444 (r--r--r--)</span><br><span class="line">mode of ‘cert.pem’ changed from 0644 (rw-r--r--) to 0444 (r--r--r--)</span><br></pre></td></tr></table></figure>

<h6 id="归集证书"><a href="#归集证书" class="headerlink" title="归集证书"></a>归集证书</h6><ul>
<li>分别执行以下命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp server-*.pem  /etc/docker/ </span><br><span class="line"></span><br><span class="line">cp ca.pem /etc/docker/</span><br></pre></td></tr></table></figure>

<ul>
<li>删除不需要的证书文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen ca]# rm -v client.csr server.csr</span><br><span class="line">rm: remove regular file ‘client.csr’? y</span><br><span class="line">removed ‘client.csr’</span><br><span class="line">rm: remove regular file ‘server.csr’? y</span><br><span class="line">removed ‘server.csr’</span><br></pre></td></tr></table></figure>

<h6 id="修改docker-的配置"><a href="#修改docker-的配置" class="headerlink" title="修改docker 的配置"></a>修改docker 的配置</h6><p>执行下面的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure>

<p>把ExecStart 的值设置为如下，并退出编辑(按<em>Esc键*，然后按</em>:wq*)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/dockerd --tlsverify --tlscacert=/etc/docker/ca.pem --tlscert=/etc/docker/server-cert.pem --tlskey=/etc/docker/server-key.pem -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock</span><br></pre></td></tr></table></figure>

<h6 id="重启docker"><a href="#重启docker" class="headerlink" title="重启docker"></a>重启docker</h6><p>分别执行下面命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta">#</span><span class="bash">如果证书有问题会报错这步</span></span><br><span class="line">systemctl restart docker </span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure>

<h6 id="下载证书"><a href="#下载证书" class="headerlink" title="下载证书"></a>下载证书</h6><p>下载<em>ca.pem</em>,<em>cert.pem</em>和<em>key.pem</em>证书到电脑上一个空文件夹。</p>
<h6 id="连接到远程docker"><a href="#连接到远程docker" class="headerlink" title="连接到远程docker"></a>连接到远程docker</h6><p>在IDEA下载Docker插件后新建一个配置，说明如图示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200325140251.jpg" alt="配置图"></p>
<p>界面效果如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200325140305.jpg" alt="界面图"></p>
<p>成功连接，连接不上的，查找如下原因</p>
<ul>
<li>tcp连接没换</li>
<li>端口不对</li>
<li>服务器防火墙没放端口</li>
<li>云服务器防火墙没放端口</li>
<li>证书没弄好</li>
</ul>
<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><p>参考以下博客加以实践，将可能提示的信息提取出来了，更能直观看到是否执行成功、</p>
<div class="note info">
            <p><a href="https://blog.csdn.net/qq_15071263/article/details/94997887" target="_blank" rel="noopener">Docker - 通过IDEA和CA证书加密远程链接到服务器上的Docker</a></p>
          </div>]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>IDEA</tag>
        <tag>Docker</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装</title>
    <url>/archives/41070/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Linux下安装Docker容器</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Centos 7.7.1908</li></ul>
          </div>

<h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><ul>
<li>卸载旧版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<ul>
<li>设置仓库</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">  device-mapper-persistent-data \</span><br><span class="line">  lvm2</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">  --add-repo \</span><br><span class="line">  https:**//**download.docker.com**/**linux**/**centos**/**docker-ce.repo</span><br></pre></td></tr></table></figure>



<ul>
<li>安装最新版本</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<ul>
<li>启动Docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<ul>
<li>验证Docker</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><p>执行完上面的命令后，如无意外如下图响应<em>Hello form Docker!</em>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200325011113.png" alt="Docker运行图"></p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>集成Swagger2，第三方knife4j</title>
    <url>/archives/16091/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>SpringBoot集成Swagger2，第三方knife4j</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li><li>Swagger2: 2.9.2</li></ul>
          </div>

<p>因为只是简单的集成，所以更多功能请查看官方文档，如果按照官方集成没有效果可以参考一下下面的配置。</p>
<div class="note info">
            <p><a href="https://doc.xiaominfo.com/guide/useful.html" target="_blank" rel="noopener">knife4j官方文档</a></p>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─blog</span><br><span class="line">│  │  │      └─demo</span><br><span class="line">│  │  │          │  DemoApplication.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─config</span><br><span class="line">│  │  │          │      Swagger2Config.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─controller</span><br><span class="line">│  │  │                  TestController.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      │  application<span class="literal">-dev</span>.yml</span><br><span class="line">│  │      │  application<span class="literal">-local</span>.yml</span><br><span class="line">│  │      │  application.yml</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─<span class="keyword">static</span></span><br><span class="line">│  │      └─templates</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─blog</span><br><span class="line">│              └─demo</span><br><span class="line">│                      DemoApplicationTests.java</span><br></pre></td></tr></table></figure>



<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><p>ui选一个就可以了，建议选knife4j，界面和功能上比较好。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--文档依赖--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--处理java.lang.NumberFormatException: For input string: ""，单独引入下面的依赖--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.swagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-models<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--为防止可能发生冲突下面选一个UI即可--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--官方ui--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--第三方ui--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><p>新建一个<em>Swagger2Config</em>配置类，并限定指定环境可以查看，因为在正式环境下一般不打开文档，例如下面限定local环境才可以打开。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Profile;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档配置，仅在local环境生效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 18:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"local"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .useDefaultResponseMessages(<span class="keyword">false</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//控制器包名</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"blog.demo.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                <span class="comment">//详细信息设置</span></span><br><span class="line">                .title(<span class="string">"接口列表 v1.0.0"</span>)</span><br><span class="line">                .description(<span class="string">"接口文档"</span>)</span><br><span class="line">                <span class="comment">//官方ui使用前面的，第三方使用后面的</span></span><br><span class="line">                .termsOfServiceUrl(<span class="string">"http://127.0.0.1:8086/blog/swagger-ui.html"</span>).termsOfServiceUrl(<span class="string">"http://127.0.0.1:8086/blog/doc.html"</span>)</span><br><span class="line">                .contact(<span class="string">"chenluby.github.io"</span>)</span><br><span class="line">                .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>新建一个测试控制器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParam;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiImplicitParams;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 18:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getSwagger2"</span>)</span><br><span class="line">    <span class="meta">@ApiOperation</span>(<span class="string">"测试文档"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"name"</span>, value = <span class="string">"名字"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"string"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"age"</span>, value = <span class="string">"年龄"</span>, dataType = <span class="string">"int"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSwagger2</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"文档测试"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>官方UI效果图如下：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200324192311.png" alt="官方UI运行图"></p>
<ul>
<li>限制后的效果如图(基于官方UI的提示)</li>
</ul>
<p>在Edit Configurations修改启动环境后,可以看到dev环境访问文档是访问不了的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200324192924.png" alt="限制环境效果"></p>
<p>第三方界面参考官方文档给出的示例</p>
<div class="note info">
            <p><a href="https://doc.xiaominfo.com/guide/ui-style.html" target="_blank" rel="noopener">第三方UI</a></p>
          </div>



<ul>
<li><p>访问地址：</p>
<p><a href="http://127.0.0.1:8086/blog/swagger-ui.html" target="_blank" rel="noopener">http://127.0.0.1:8086/blog/swagger-ui.html</a>    （官方UI） </br><a href="http://127.0.0.1:8086/blog/doc.html" target="_blank" rel="noopener">http://127.0.0.1:8086/blog/doc.html</a> (第三方UI)</p>
</li>
</ul>
<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-7" target="_blank" rel="noopener">源码链接</a></p>
          </div>

]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
        <tag>案例</tag>
        <tag>集成</tag>
        <tag>Swagger</tag>
        <tag>knife4j</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot全局字段验证</title>
    <url>/archives/15598/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>SpringBoot集成字段验证validation使用案例</p>
          </div> 

<a id="more"></a>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─blog</span><br><span class="line">│  │  │      └─demo</span><br><span class="line">│  │  │          │  DemoApplication.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─config</span><br><span class="line">│  │  │          │      AdviceConfig.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─controller</span><br><span class="line">│  │  │          │      TestController.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─entity</span><br><span class="line">│  │  │                  BlogDemo.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      │  application.yml</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─<span class="keyword">static</span></span><br><span class="line">│  │      └─templates</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─blog</span><br><span class="line">│              └─demo</span><br><span class="line">│                      DemoApplicationTests.java</span><br></pre></td></tr></table></figure>



<h6 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h6><p>多条件参数判断时，为了省略if{}else if{}。这时候需要用到<em>javax.validation</em>下的参数校验，校验效果图如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200324163901.png" alt="validation验证响应图"></p>
<p>为了页面不显示500等信息，使用<em>@RestControllerAdvice</em>注解可以自定义响应码等信息，这样页面就不会将控制台的报错显示到页面了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200324164325.png" alt="全局异常响应图"></p>
<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li></ul>
          </div>

<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略get/set等方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局控制器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 15:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdviceConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e        异常捕抓</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response http响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Object</span> <span class="title">exceptionHandle</span>(<span class="title">Exception</span> <span class="title">e</span>, <span class="title">HttpServletResponse</span> <span class="title">response</span>) </span>&#123;</span><br><span class="line">        String message;</span><br><span class="line">        <span class="comment">//参数校验异常处理</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BindingResult) &#123;</span><br><span class="line">            BindingResult bindingResult = (BindingResult) e;</span><br><span class="line">            <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">                <span class="comment">//自定义响应码</span></span><br><span class="line">                response.setStatus(HttpStatus.BAD_REQUEST.value());</span><br><span class="line">                message = bindingResult.getFieldError().getDefaultMessage();</span><br><span class="line">                String responseMessage = <span class="string">"&#123;code:\"-1\",message:\""</span> + message + <span class="string">"\"&#125;"</span>;</span><br><span class="line">                <span class="keyword">return</span> responseMessage;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());</span><br><span class="line">        message = <span class="string">"未知错误"</span>;</span><br><span class="line">        String responseMessage = <span class="string">"&#123;code:\"-1\",message:\""</span> + message + <span class="string">"\"&#125;"</span>;</span><br><span class="line">        <span class="keyword">return</span> responseMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>验证当然需要自定义信息，需要在<strong>实体</strong>(目前单独请求参数不生效，暂未深入研究，以实体为例)使用<em>javax.validation</em>包下的注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.DecimalMin;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotBlank;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 16:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Integer验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"number不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer number;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 特殊的需要两个注解，一个验证格式化，一个验证非空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱不符合格式"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"邮箱不能为空"</span>)</span><br><span class="line">    <span class="keyword">public</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格验证</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"价格不能为空！"</span>)</span><br><span class="line">    <span class="meta">@DecimalMin</span>(message = <span class="string">"价格不能小于1"</span>, value = <span class="string">"1"</span>)</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本项目运行地址前缀：<a href="http://localhost:8085/blog/getTest" target="_blank" rel="noopener">http://localhost:8085/blog/getTest</a></p>
<h6 id="可能用到的注解"><a href="#可能用到的注解" class="headerlink" title="可能用到的注解"></a>可能用到的注解</h6><p>为了方便使用，翻译了部分源码文档注释，方便查阅(基于包<em>javax.validation.constraints</em>)。</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">注解</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">AssertFalse</td>
<td align="left">注释元素一定是false的。 支持的类型包括boolean和Boolean 。<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">AssertTrue</td>
<td align="left">注释元素必须是true的。 支持的类型包括boolean和Boolean 。<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">DecimalMax</td>
<td align="left">带注释的元素必须是一个数字，其值必须小于或等于指定的最大值。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>CharSequence<br/>byte ， short ， int ， long ，和他们各自的包装<br/>需要注意的是double和float不支持，由于舍入误差（有些供应商可能提供一些近似的支持）。<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">DecimalMin</td>
<td align="left">带注释的元素必须是一个数字，其值必须大于或等于指定的最小值。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>CharSequence<br/>byte ， short ， int ， long ，和他们各自的包装<br/>需要注意的是double和float不支持，由于舍入误差（有些供应商可能提供一些近似的支持）。<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">Digits</td>
<td align="left">带注释的元素必须被接受范围内的数。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>CharSequence<br/>byte ， short ， int ， long ，和他们各自的包装类型<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">Email</td>
<td align="left">该字符串必须是一个结构完整的电子邮件地址。 是什么使一个有效的电子邮件地址确切的语义留给Jakarta Bean验证。 接受CharSequence 。<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">Future</td>
<td align="left">注释元素必须在未来的瞬间，日期或时间。<br/>现在由定义ClockProvider附接到Validator或ValidatorFactory 。 默认clockProvider根据虚拟机定义了当前时间，如果需要的话将当前默认时区。<br/>支持的类型包括：<br/>java.util.Date<br/>java.util.Calendar<br/>java.time.Instant<br/>java.time.LocalDate<br/>java.time.LocalDateTime<br/>java.time.LocalTime<br/>java.time.MonthDay<br/>java.time.OffsetDateTime<br/>java.time.OffsetTime<br/>java.time.Year<br/>java.time.YearMonth<br/>java.time.ZonedDateTime<br/>java.time.chrono.HijrahDate<br/>java.time.chrono.JapaneseDate<br/>java.time.chrono.MinguoDate<br/>java.time.chrono.ThaiBuddhistDate<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">FutureOrPresent</td>
<td align="left">带注释的元素必须在现在或在将来瞬间，日期或时间。<br/>现在由定义ClockProvider附接到Validator或ValidatorFactory 。 默认clockProvider根据虚拟机定义了当前时间，如果需要的话将当前默认时区。<br/>本这里的概念相对定义为在其上使用的约束的类型。 举例来说，如果约束是对一个Year ，现在将意味着当前整个一年。<br/>支持的类型包括：<br/>java.util.Date<br/>java.util.Calendar<br/>java.time.Instant<br/>java.time.LocalDate<br/>java.time.LocalDateTime<br/>java.time.LocalTime<br/>java.time.MonthDay<br/>java.time.OffsetDateTime<br/>java.time.OffsetTime<br/>java.time.Year<br/>java.time.YearMonth<br/>java.time.ZonedDateTime<br/>java.time.chrono.HijrahDate<br/>java.time.chrono.JapaneseDate<br/>java.time.chrono.MinguoDate<br/>java.time.chrono.ThaiBuddhistDate<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">Max</td>
<td align="left">带注释的元素必须是一个数字，其值必须小于或等于指定的最大值。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>byte ， short ， int ， long ，和他们各自的包装<br/>需要注意的是double和float不支持，由于舍入误差（有些供应商可能提供一些近似的支持）。<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center">Min</td>
<td align="left">带注释的元素必须是一个数字，其值必须大于或等于指定的最小值。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>byte ， short ， int ， long ，和他们各自的包装<br/>需要注意的是double和float不支持，由于舍入误差（有些供应商可能提供一些近似的支持）。<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center">Negative</td>
<td align="left">带注释的元素必须是严格为负号（即0被认为是一个无效值）。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>byte ， short ， int ， long ， float ， double和它们各自的包装<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center">NegativeOrZero</td>
<td align="left">带注释的元素必须是负数或0。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>byte ， short ， int ， long ， float ， double和它们各自的包装<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center">NotBlank</td>
<td align="left">该注释元素不能为null ，且必须含有至少一个非空白字符。 接受CharSequence</td>
</tr>
<tr>
<td align="center">14</td>
<td align="center">NotEmpty</td>
<td align="left">注释元素不能是null也不空。<br/>支持的类型包括：<br/>CharSequence （字符序列的长度被评估）<br/>Collection （集合的大小进行评估）<br/>Map （map大小进行评价）<br/>Array（数组长度被评估）</td>
</tr>
<tr>
<td align="center">15</td>
<td align="center">NotNull</td>
<td align="left">注释元素一定不能null 。 接受任何类型。</td>
</tr>
<tr>
<td align="center">16</td>
<td align="center">Null</td>
<td align="left">带注释的元素必须为null 。 接受任何类型</td>
</tr>
<tr>
<td align="center">17</td>
<td align="center">Past</td>
<td align="left">注释元素必须是在过去的瞬间，日期或时间。<br/>现在由定义ClockProvider附接到Validator或ValidatorFactory 。 默认clockProvider根据虚拟机定义了当前时间，如果需要的话将当前默认时区。<br/>支持的类型包括：<br/>java.util.Date<br/>java.util.Calendar<br/>java.time.Instant<br/>java.time.LocalDate<br/>java.time.LocalDateTime<br/>java.time.LocalTime<br/>java.time.MonthDay<br/>java.time.OffsetDateTime<br/>java.time.OffsetTime<br/>java.time.Year<br/>java.time.YearMonth<br/>java.time.ZonedDateTime<br/>java.time.chrono.HijrahDate<br/>java.time.chrono.JapaneseDate<br/>java.time.chrono.MinguoDate<br/>java.time.chrono.ThaiBuddhistDate<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">18</td>
<td align="center">PastOrPresent</td>
<td align="left">带注释的元素必须是在过去或在本瞬间，日期或时间。<br/>现在由定义ClockProvider附接到Validator或ValidatorFactory 。 默认clockProvider根据虚拟机定义了当前时间，如果需要的话将当前默认时区。<br/>本的概念相对定义为在其上使用的约束的类型。 举例来说，如果约束是对一个Year ，现在将意味着当前整个一年。<br/>支持的类型包括：<br/>java.util.Date<br/>java.util.Calendar<br/>java.time.Instant<br/>java.time.LocalDate<br/>java.time.LocalDateTime<br/>java.time.LocalTime<br/>java.time.MonthDay<br/>java.time.OffsetDateTime<br/>java.time.OffsetTime<br/>java.time.Year<br/>java.time.YearMonth<br/>java.time.ZonedDateTime<br/>java.time.chrono.HijrahDate<br/>java.time.chrono.JapaneseDate<br/>java.time.chrono.MinguoDate<br/>java.time.chrono.ThaiBuddhistDate<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">19</td>
<td align="center">Pattern</td>
<td align="left">附加说明CharSequence必须指定正则表达式匹配。 正则表达式遵循Java正则表达式约定见java.util.regex.Pattern 。<br/>接受CharSequence 。 null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">20</td>
<td align="center">Positive</td>
<td align="left">带注释的元素必须是严格的正数（即0被认为是一个无效值）。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>byte ， short ， int ， long ， float ， double和它们各自的包装<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">21</td>
<td align="center">PositiveOrZero</td>
<td align="left">带注释的元素必须是正数或0。<br/>支持的类型包括：<br/>BigDecimal<br/>BigInteger<br/>byte ， short ， int ， long ， float ， double和它们各自的包装<br/>null元素被认为是有效的。</td>
</tr>
<tr>
<td align="center">22</td>
<td align="center">Size</td>
<td align="left">该注释元素大小必须在指定的边界之间（含）。<br/>支持的类型包括：<br/>CharSequence （字符序列的长度被评估）<br/>Collection （集合的大小进行评估）<br/>Map （map大小进行评价）<br/>Array（数组长度被评估）<br/> null元素被认为是有效的。</td>
</tr>
</tbody></table>
<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-6" target="_blank" rel="noopener">源码链接</a></p>
          </div>]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
        <tag>案例</tag>
        <tag>集成</tag>
        <tag>validation</tag>
        <tag>字段验证</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis发布订阅</title>
    <url>/archives/30313/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>基于SpringBoot集成的Redis发布,订阅</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li><li>Redis: 3.2.100</li></ul>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─blog</span><br><span class="line">│  │  │      └─demo</span><br><span class="line">│  │  │          │  DemoApplication.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─cofig</span><br><span class="line">│  │  │          │      ConsumerConfig.java</span><br><span class="line">│  │  │          │      ProducerConfig.java</span><br><span class="line">│  │  │          │      RedisListenerConfig.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─constant</span><br><span class="line">│  │  │          │      RedisConstant.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─controller</span><br><span class="line">│  │  │                  TestController.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      │  application<span class="literal">-local</span>.yml</span><br><span class="line">│  │      │  application.yml</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─<span class="keyword">static</span></span><br><span class="line">│  │      └─templates</span><br></pre></td></tr></table></figure>



<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--省略get/set等方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><ul>
<li>监听器配置-<em>RedisListenerConfig</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.demo.constant.RedisConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.PatternTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.adapter.MessageListenerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 13:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListenerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ConsumerConfig consumerConfig;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis消息监听器容器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//添加多个topic使用addMessageListener</span></span><br><span class="line">        container.addMessageListener(topicOne(), <span class="keyword">new</span> PatternTopic(RedisConstant.TOPIC_ONE));</span><br><span class="line">        <span class="comment">//  container.addMessageListener(topicTwo(), new PatternTopic(RedisConstant.TOPIC_TWO));</span></span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">topicOne</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传入ConsumerConfig一个消息接受的处理器，利用反射的方法调用“topicOne”</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(consumerConfig, <span class="string">"topicOne"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">MessageListenerAdapter <span class="title">topicTwo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 传入ConsumerConfig一个消息接受的处理器，利用反射的方法调用“topicTwo”</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageListenerAdapter(consumerConfig, <span class="string">"topicTwo"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>生产者配置-<em>ProducerConfig</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 13:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向通道发送消息的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channel 通道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendChannelMessage</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"生产通道：&#123;&#125;,生产信息：&#123;&#125;"</span>, channel, message);</span><br><span class="line">        redisTemplate.convertAndSend(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>消费者配置-<em>ConsumerConfig</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.cofig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 13:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topicOne</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拿到信息后实现业务逻辑</span></span><br><span class="line">        log.info(<span class="string">"topicOne消费者信息:&#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topicTwo</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拿到信息后实现业务逻辑</span></span><br><span class="line">        log.info(<span class="string">"topicTwo消费者信息:&#123;&#125;"</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Redis-Topic常量类</li>
</ul>
<p>为了方便使用，一般定义一个用于发布定义的常量类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.constant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis-Topic常量类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 13:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConstant</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_ONE = <span class="string">"TOPIC_ONE"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_TWO = <span class="string">"TOPIC_TWO"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>添加下面代码后访问地址<a href="http://localhost:8084/blog/getMessage" target="_blank" rel="noopener">http://localhost:8084/blog/getMessage</a>   将会看到控制台的消费信息，如图：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.demo.cofig.ProducerConfig;</span><br><span class="line"><span class="keyword">import</span> blog.demo.constant.RedisConstant;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/24. 14:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProducerConfig producerConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getMessage"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        producerConfig.sendChannelMessage(RedisConstant.TOPIC_ONE, <span class="string">"&#123;\"test\":\"测试发布订阅1\"&#125;"</span>);</span><br><span class="line">        <span class="comment">//RedisListenerConfig未添加addMessageListener监听，所以消费者不会消费TOPIC_TWO</span></span><br><span class="line">        producerConfig.sendChannelMessage(RedisConstant.TOPIC_TWO, <span class="string">"&#123;\"test\":\"测试发布订阅2\"&#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200324165333.png" alt="消费日志"></p>
<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-5" target="_blank" rel="noopener">源码链接</a></p>
          </div>]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>案例</tag>
        <tag>集成</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Aop五种通知类型</title>
    <url>/archives/42569/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>基于SpringBoot的 Spring-Aop五种通知类型示例</p>
          </div> 

<a id="more"></a>



<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li></ul>
          </div>

<h6 id="主要类型"><a href="#主要类型" class="headerlink" title="主要类型"></a>主要类型</h6><div class="note success no-icon">
            <ul><li>@Before: 前置通知, 在方法执行之前执行</li><li>@After: 后置通知, 在方法执行之后执行</li><li>@AfterRunning: 返回通知, 在方法返回结果之后执行</li><li>@AfterThrowing: 异常通知, 在方法抛出异常之后</li><li>@Around: 环绕通知, 围绕着方法执行</li></ul>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─blog</span><br><span class="line">│  │  │      └─demo</span><br><span class="line">│  │  │          │  DemoApplication.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─aspect</span><br><span class="line">│  │  │          │      DemoAspect.java</span><br><span class="line">│  │  │          │      UserAccess.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─controller</span><br><span class="line">│  │  │                  TestController.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      │  application.yml</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─<span class="keyword">static</span></span><br><span class="line">│  │      └─templates</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─blog</span><br><span class="line">│              └─demo</span><br><span class="line">│                      DemoApplicationTests.java</span><br></pre></td></tr></table></figure>



<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--aop--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--省略get/set等方法--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p><em>application.yml</em>配置如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br></pre></td></tr></table></figure>

<h6 id="切面类"><a href="#切面类" class="headerlink" title="切面类"></a>切面类</h6><p>切面类必须有<em>@Component*和</em>@Aspect*注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Aop切面类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/23. 16:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &#123;https://www.xncoding.com/2017/07/24/spring/sb-aop.html&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点声明，第一个*表示任意返回值，第二个*表示controller任意类，第三个*任意方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * blog.demo.controller.*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aopDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知, 在方法执行之前执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"aopDemo()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 接收到请求，记录请求内容</span></span><br><span class="line">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        HttpServletRequest request = attributes.getRequest();</span><br><span class="line">        log.info(<span class="string">"前置通知&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        <span class="comment">// 记录下请求内容</span></span><br><span class="line">        log.info(<span class="string">"请求地址:&#123;&#125;"</span>, request.getRequestURL().toString());</span><br><span class="line">        log.info(<span class="string">"请求方法:&#123;&#125;"</span>, request.getMethod());</span><br><span class="line">        log.info(<span class="string">"ip:&#123;&#125;"</span>, request.getRemoteAddr());</span><br><span class="line">        log.info(<span class="string">"类方法:&#123;&#125;"</span>, joinPoint.getSignature().getDeclaringTypeName() + <span class="string">"."</span> + joinPoint.getSignature().getName());</span><br><span class="line">        log.info(<span class="string">"参数连接点:&#123;&#125;"</span>, Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知, 在方法执行之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"aopDemo()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfter</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        log.info(<span class="string">"后置通知&gt;&gt;&gt;&gt;&#123;&#125;"</span>, methodName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回通知, 在方法返回结果之后执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result    在返回通知方法中可以从result变量中获取连接点方法的返回结果了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"aopDemo()"</span>,</span><br><span class="line">            returning = <span class="string">"result"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(JoinPoint joinPoint, Object result)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">        log.info(<span class="string">"返回通知&gt;&gt;&gt;&gt;连接点方法为：&#123;&#125;,参数为：&#123;&#125;,目标方法执行结果为：&#123;&#125;"</span>, methodName, args, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置异常通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"aopDemo()"</span>, throwing = <span class="string">"ex"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint, RuntimeException ex)</span> </span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        log.info(<span class="string">"后置异常通知&gt;&gt;&gt;&gt;方法名：&#123;&#125;,异常信息:&#123;&#125;"</span>, methodName, ex.getLocalizedMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知, 围绕着方法执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userAccess 自定义注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(userAccess)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint pjp, UserAccess userAccess)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取注解里的值</span></span><br><span class="line">        log.info(<span class="string">"环绕通知&gt;&gt;&gt;&gt;围绕着方法执行通知&#123;&#125;"</span>, userAccess.desc());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h6><p>主要用于在需要的特定处理的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/23. 17:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserAccess &#123;</span><br><span class="line">    <span class="function">String <span class="title">desc</span><span class="params">()</span> <span class="keyword">default</span> "无信息"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>本项目地址前缀为<a href="http://localhost:8083/blog" target="_blank" rel="noopener">http://localhost:8083/blog</a></p>
<p>为了效果区分，分别访问<a href="http://localhost:8083/blog/getAop" target="_blank" rel="noopener">http://localhost:8083/blog/getAop</a> 和 <a href="http://localhost:8083/blog/getAfterThrowing" target="_blank" rel="noopener">http://localhost:8083/blog/getAfterThrowing</a>  得到的结果如图标志</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200323184514.png" alt="aop运行结果"></p>
<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><div class="note info">
            <p><a href="https://www.xncoding.com/2017/07/24/spring/sb-aop.html" target="_blank" rel="noopener">SpringBoot系列 - 使用AOP</a></p>
          </div> 

<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-4" target="_blank" rel="noopener">源码链接</a></p>
          </div>

]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
        <tag>案例</tag>
        <tag>集成</tag>
        <tag>Spring</tag>
        <tag>Aop</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Redis集成</title>
    <url>/archives/17624/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>SpringBoot集成Redis</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li><li>Redis: 3.2.100</li></ul>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  └─main</span><br><span class="line">│      ├─java</span><br><span class="line">│      │  └─blog</span><br><span class="line">│      │      └─demo</span><br><span class="line">│      │          │  DemoApplication.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          ├─controller</span><br><span class="line">│      │          │      TestController.java</span><br><span class="line">│      │          │</span><br><span class="line">│      │          └─util</span><br><span class="line">│      │                  RedisUtils.java</span><br><span class="line">│      │</span><br><span class="line">│      └─resources</span><br><span class="line">│          │  application<span class="literal">-local</span>.yml</span><br><span class="line">│          │  application.yml</span><br></pre></td></tr></table></figure>



<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--web--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>为了区分多环境，分别创建了<em>application.yml</em>和<em>application-local.yml</em>文件</p>
<ul>
<li><em>application.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#应用程序的上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#指定环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>application-local.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment">#连接工厂使用的数据库索引范围0-15</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="comment">#地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment">#端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment">#密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#连接超时</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 最大空闲连接数</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="comment"># 最小空闲连接数</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 获取连接时的最大等待毫秒数(-1阻塞不确定的时间)</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="comment"># 最大活跃连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br></pre></td></tr></table></figure>

<h6 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h6><p>为方便操作<em>key</em>和<em>value</em>，一般建立一个工具类<em>RedisUtils</em>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/23. 14:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> &#123;https://www.cnblogs.com/coder-lzh/p/9897007.html&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisUtils</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：TTL key，以秒为单位，返回给定 key的剩余生存时间(TTL, time to live)。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">ttl</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：expire 设置过期时间，单位秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(String key, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        redisTemplate.expire(key, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：INCR key，增加key一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">long</span> delta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：KEYS pattern，查找所有符合给定模式 pattern的 key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">keys</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：DEL key，删除一个key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// String（字符串）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：SET key value，设置一个key-value（将字符串值 value关联到 key）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：SET key value EX seconds，设置key-value和超时时间（秒）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout （以秒为单位）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key, String value, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, timeout, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：GET key，返回 key所关联的字符串值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hash（哈希表）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：HSET key field value，将哈希表 key中的域 field的值设为 value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hset</span><span class="params">(String key, String field, Object value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, field, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：HGET key field，返回哈希表 key中给定域 field的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hget</span><span class="params">(String key, String field)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.opsForHash().get(key, field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：HDEL key field [field ...]，删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hdel</span><span class="params">(String key, Object... fields)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, fields);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：HGETALL key，返回哈希表 key中，所有的域和值。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title">hgetall</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List（列表）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：LPUSH key value，将一个值 value插入到列表 key的表头</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行 LPUSH命令后，列表的长度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lpush</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().leftPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：LPOP key，移除并返回列表 key的头元素。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 列表key的头元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lpop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (String) redisTemplate.opsForList().leftPop(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现命令：RPUSH key value，将一个值 value插入到列表 key的表尾(最右边)。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行 LPUSH命令后，列表的长度。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">rpush</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>测试控制器，为方便测试，直接使用接口请求，前缀为<a href="http://localhost:8082/blog/" target="_blank" rel="noopener">http://localhost:8082/blog/</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> blog.demo.util.RedisUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/23. 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定键的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"getKey/&#123;key&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getKey</span><span class="params">(@PathVariable String key)</span> </span>&#123;</span><br><span class="line">        String value = redisUtils.get(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"值为"</span> + value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置键值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"setKey/&#123;key&#125;/&#123;value&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(@PathVariable String key, @PathVariable String value)</span> </span>&#123;</span><br><span class="line">        redisUtils.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-3" target="_blank" rel="noopener">源码链接</a></p>
          </div>]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
        <tag>案例</tag>
        <tag>集成</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-MybatisPlus</title>
    <url>/archives/62881/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>SpringBoot集成MybatisPlus，MySQL</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li><li>MybatisPlus:3.3.1</li><li>MySQL:5.6.43</li></ul>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─blog</span><br><span class="line">│  │  │      └─demo</span><br><span class="line">│  │  │          │  DemoApplication.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─config</span><br><span class="line">│  │  │          │      MybatisPlusConfig.java</span><br><span class="line">│  │  │          │      MyMetaObjectHandlerConfig.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─controller</span><br><span class="line">│  │  │          │      BlogDemoController.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─db</span><br><span class="line">│  │  │          │      blog<span class="literal">-demo</span>.sql</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─entity</span><br><span class="line">│  │  │          │      BlogDemo.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─mapper</span><br><span class="line">│  │  │          │      BlogDemoMapper.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─service</span><br><span class="line">│  │  │          │  │  BlogDemoService.java</span><br><span class="line">│  │  │          │  │</span><br><span class="line">│  │  │          │  └─impl</span><br><span class="line">│  │  │          │          BlogDemoServiceImpl.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─util</span><br><span class="line">│  │  │                  GenCodeUtils.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      │  application<span class="literal">-local</span>.yml</span><br><span class="line">│  │      │  application.yml</span><br><span class="line">│  │      │  banner.txt</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─mapper</span><br><span class="line">│  │      ├─<span class="keyword">static</span></span><br><span class="line">│  │      └─templates</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─blog</span><br><span class="line">│              └─demo</span><br><span class="line">│                  │  DemoApplicationTests.java</span><br><span class="line">│                  │</span><br><span class="line">│                  └─controller</span><br><span class="line">│                          BlogDemoControllerTests.java</span><br></pre></td></tr></table></figure>



<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><p>下面创建勾选的依赖，启动和测试程序需要用到的，使用创建默认的配置就可以。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面集成需要的依赖包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--MySQL驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--省略get/set等方法--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--mybatisplus依赖--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>为了区分多环境，分别创建了<em>application.yml</em>和<em>application-local.yml</em>文件</p>
<ul>
<li><em>application.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#应用程序的上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#指定环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>application-local.yml</em>配置如下,只需在原来的<em>mybatis</em>给为<em>mybatis-plus</em>即可(第10行)，3.3.0开始支持 逻辑已删除值(默认为 1)未删除值(默认为 0)，如果相同可以不配置。使用mp自带方法删除和查找都会附带逻辑删除功能 (自己写的xml不会)<a href="https://mp.baomidou.com/guide/logic-delete.html" target="_blank" rel="noopener">详细说明</a></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/blog-demo?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#MyBatis的映射文件的位置，resource的mapper下的所有Mapper.xml结尾的文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment">#包搜索类型别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">blog.demo.entity</span></span><br><span class="line">  <span class="comment">#执行SQL打印</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>

<h6 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h6><p>用于测试的SQL脚本，可以拿到Navicat或其它可视化管理工具执行查询下面脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server         : demo_test</span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 50643</span><br><span class="line"> Source Host           : localhost:3306</span><br><span class="line"> Source Schema         : blog-demo</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 50643</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 21&#x2F;03&#x2F;2020 00:25:05</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for blog_demo</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;blog_demo&#96;;</span><br><span class="line">CREATE TABLE &#96;blog_demo&#96;  (</span><br><span class="line">  &#96;bd_id&#96; int(4) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#39;自增id&#39;,</span><br><span class="line">  &#96;bd_name&#96; varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;名称&#39;,</span><br><span class="line">  &#96;bd_add_time&#96; datetime(0) NULL DEFAULT NULL COMMENT &#39;添加时间&#39;,</span><br><span class="line">  &#96;bd_update_time&#96; datetime(0) NULL DEFAULT NULL COMMENT &#39;更新时间&#39;,</span><br><span class="line">  &#96;bd_logic_delete&#96; int(4) NULL DEFAULT NULL COMMENT &#39;逻辑删除1 表示删除，0 表示未删除&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;bd_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 3 CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of blog_demo</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;blog_demo&#96; VALUES (1, &#39;小陈&#39;, &#39;2020-03-21 00:20:30&#39;, &#39;2020-03-21 00:20:38&#39;, 1);</span><br><span class="line">INSERT INTO &#96;blog_demo&#96; VALUES (2, &#39;小明&#39;, &#39;2020-03-21 00:20:34&#39;, &#39;2020-03-21 00:20:41&#39;, 0);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><ul>
<li>上面的都完成后另外在config包下建立配置文件<em>MybatisPlusConfig</em>，用于扫描mapper文件，也可直接在启动类设置，为了拓展建议建立一个配置类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MybatisPlus配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/21. 0:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"blog.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置MybatisPlus填充功能,在config包下建立配置文件<em>MyMetaObjectHandlerConfig</em>，用于设置填充内容。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/21. 1:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandlerConfig</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入元对象字段填充（用于插入时对公共字段的填充）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject 元对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start insert fill ...."</span>);</span><br><span class="line">        <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">        <span class="keyword">this</span>.strictInsertFill(metaObject, <span class="string">"bdAddTime"</span>, Date<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Date</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新元对象字段填充（用于更新时对公共字段的填充）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> metaObject 元对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"start update fill ...."</span>);</span><br><span class="line">        <span class="comment">// 起始版本 3.3.0(推荐使用)</span></span><br><span class="line">        <span class="keyword">this</span>.strictUpdateFill(metaObject, <span class="string">"bdUpdateTime"</span>, Date<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">Date</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用填充功能实体类属性需要设置注解@TableField的fill。如:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"bd_add_time"</span>, fill = FieldFill.INSERT)</span><br><span class="line">    <span class="keyword">private</span> Date bdAddTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableField</span>(value = <span class="string">"bd_update_time"</span>, fill = FieldFill.UPDATE)</span><br><span class="line">    <span class="keyword">private</span> Date bdUpdateTime;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<strong>test/java/blog/demo/controller</strong>下新建<em>BlogDemoControllerTest</em>s测试类(通过地址访问可省略)。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.ResultActions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/20. 17:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogDemoControllerTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟mvc测试对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.webApplicationContext).build();</span><br><span class="line">        ResultActions resultActions = <span class="keyword">this</span>.mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/getList"</span>));</span><br><span class="line">        resultActions.andReturn().getResponse().setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resultActions.andDo(MockMvcResultHandlers.print()).andExpect(MockMvcResultMatchers.status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addBlogDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.webApplicationContext).build();</span><br><span class="line">        ResultActions resultActions = <span class="keyword">this</span>.mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/addBlogDemo"</span>)</span><br><span class="line">                .param(<span class="string">"bdLogicDelete"</span>, <span class="string">"0"</span>).param(<span class="string">"bdName"</span>, <span class="string">"小红"</span>));</span><br><span class="line">        resultActions.andReturn().getResponse().setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resultActions.andDo(MockMvcResultHandlers.print()).andExpect(MockMvcResultMatchers.status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateBlogDemo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.webApplicationContext).build();</span><br><span class="line">        ResultActions resultActions = <span class="keyword">this</span>.mockMvc.perform(MockMvcRequestBuilders.put(<span class="string">"/updateBlogDemo"</span>)</span><br><span class="line">                .param(<span class="string">"bdId"</span>, <span class="string">"1"</span>).param(<span class="string">"bdName"</span>, <span class="string">"小陈童鞋"</span>));</span><br><span class="line">        resultActions.andReturn().getResponse().setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resultActions.andDo(MockMvcResultHandlers.print()).andExpect(MockMvcResultMatchers.status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>本地运行访问地址前缀为：<a href="http://localhost:8080/blog" target="_blank" rel="noopener">http://localhost:8080/blog</a> 接口名从<em>controller</em>获取，由于<em>Post</em>，<em>Put</em>方法不能直接通过浏览器访问，可以借助<em>Postman</em>接口测试工具测试。执行成功后会自动填充<em>bd_add_time</em>或<em>bd_update_time</em>数据，这样就不用每次设置这个属性的值了。</li>
</ul>
<h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><div class="note info">
            <p><a href="https://mp.baomidou.com/" target="_blank" rel="noopener">MybatisPlus文档</a></p>
          </div>

<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-2" target="_blank" rel="noopener">源码链接</a></p>
          </div>]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>JAVA</tag>
        <tag>MySQL</tag>
        <tag>案例</tag>
        <tag>集成</tag>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-Mybatis</title>
    <url>/archives/47842/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>SpringBoot集成Mybatis，MySQL</p>
          </div> 

<a id="more"></a>

<h6 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h6><div class="note warning no-icon">
            <ul><li>Maven :3.6.0 </li><li>Java version:1.8.0_201</li><li>SpringBoot:2.2.5.RELEASE</li><li>Mybatis:3.5.4</li><li>MySQL:5.6.43</li></ul>
          </div>

<h6 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h6><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">│  pom.xml</span><br><span class="line">│  README.md</span><br><span class="line">│</span><br><span class="line">├─.mvn</span><br><span class="line">│  └─wrapper</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.jar</span><br><span class="line">│          maven<span class="literal">-wrapper</span>.properties</span><br><span class="line">│          MavenWrapperDownloader.java</span><br><span class="line">│</span><br><span class="line">├─src</span><br><span class="line">│  ├─main</span><br><span class="line">│  │  ├─java</span><br><span class="line">│  │  │  └─blog</span><br><span class="line">│  │  │      └─demo</span><br><span class="line">│  │  │          │  DemoApplication.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─config</span><br><span class="line">│  │  │          │      MybatisConfig.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─controller</span><br><span class="line">│  │  │          │      BlogDemoController.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─db</span><br><span class="line">│  │  │          │      blog<span class="literal">-demo</span>.sql</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─entity</span><br><span class="line">│  │  │          │      BlogDemo.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          ├─mapper</span><br><span class="line">│  │  │          │      BlogDemoMapper.java</span><br><span class="line">│  │  │          │</span><br><span class="line">│  │  │          └─service</span><br><span class="line">│  │  │              │  BlogDemoService.java</span><br><span class="line">│  │  │              │</span><br><span class="line">│  │  │              └─impl</span><br><span class="line">│  │  │                      BlogDemoServiceImpl.java</span><br><span class="line">│  │  │</span><br><span class="line">│  │  └─resources</span><br><span class="line">│  │      │  application<span class="literal">-local</span>.yml</span><br><span class="line">│  │      │  application.yml</span><br><span class="line">│  │      │  banner.txt</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─mapper</span><br><span class="line">│  │      │      BlogDemoMapper.xml</span><br><span class="line">│  │      │</span><br><span class="line">│  │      ├─<span class="keyword">static</span></span><br><span class="line">│  │      └─templates</span><br><span class="line">│  └─test</span><br><span class="line">│      └─java</span><br><span class="line">│          └─blog</span><br><span class="line">│              └─demo</span><br><span class="line">│                  │  DemoApplicationTests.java</span><br><span class="line">│                  │</span><br><span class="line">│                  └─controller</span><br><span class="line">│                          BlogDemoControllerTest.java</span><br></pre></td></tr></table></figure>



<h6 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h6><p>下面创建勾选的依赖，启动和测试程序需要用到的，使用创建默认的配置就可以。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下面集成需要的依赖包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql数据库驱动包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--省略get/set方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h6><p>为了区分多环境，分别创建了<em>application.yml</em>和<em>application-local.yml</em>文件</p>
<ul>
<li><em>application.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="comment">#端口</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="comment">#应用程序的上下文路径</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/blog</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#指定环境</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>application-local.yml</em>配置如下</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/blog-demo?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#MyBatis的映射文件的位置，resource的mapper下的所有Mapper.xml结尾的文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*Mapper.xml</span></span><br><span class="line">  <span class="comment">#包搜索类型别名</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">blog.demo.entity</span></span><br><span class="line">  <span class="comment">#执行SQL打印</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure>



<h6 id="数据源"><a href="#数据源" class="headerlink" title="数据源"></a>数据源</h6><p>用于测试的SQL脚本，可以拿到Navicat或其它可视化管理工具执行查询下面脚本。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server         : demo_test</span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 50643</span><br><span class="line"> Source Host           : localhost:3306</span><br><span class="line"> Source Schema         : blog-demo</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 50643</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 21&#x2F;03&#x2F;2020 00:25:05</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for blog_demo</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;blog_demo&#96;;</span><br><span class="line">CREATE TABLE &#96;blog_demo&#96;  (</span><br><span class="line">  &#96;bd_id&#96; int(4) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#39;自增id&#39;,</span><br><span class="line">  &#96;bd_name&#96; varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#39;名称&#39;,</span><br><span class="line">  &#96;bd_add_time&#96; datetime(0) NULL DEFAULT NULL COMMENT &#39;添加时间&#39;,</span><br><span class="line">  &#96;bd_update_time&#96; datetime(0) NULL DEFAULT NULL COMMENT &#39;更新时间&#39;,</span><br><span class="line">  &#96;bd_logic_delete&#96; int(4) NULL DEFAULT NULL COMMENT &#39;逻辑删除1 表示删除，0 表示未删除&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;bd_id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 3 CHARACTER SET &#x3D; utf8mb4 COLLATE &#x3D; utf8mb4_general_ci ROW_FORMAT &#x3D; Compact;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of blog_demo</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;blog_demo&#96; VALUES (1, &#39;小陈&#39;, &#39;2020-03-21 00:20:30&#39;, &#39;2020-03-21 00:20:38&#39;, 1);</span><br><span class="line">INSERT INTO &#96;blog_demo&#96; VALUES (2, &#39;小明&#39;, &#39;2020-03-21 00:20:34&#39;, &#39;2020-03-21 00:20:41&#39;, 0);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure>

<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><ul>
<li>上面的都完成后另外在config包下建立配置文件<em>MybatisConfig</em>，用于扫描mapper文件，也可直接在启动类设置，为了拓展建议建立一个配置类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis扫描配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/21. 0:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"blog.demo.mapper"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<strong>resource/mapper</strong>文件下新建<em>BlogDemoMapper.xml</em></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"blog.demo.mapper.BlogDemoMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"BaseResultMap"</span> <span class="attr">type</span>=<span class="string">"blog.demo.entity.BlogDemo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"bd_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"bdId"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"bd_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"bdName"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"bd_add_time"</span> <span class="attr">javaType</span>=<span class="string">"DATE"</span> <span class="attr">property</span>=<span class="string">"bdAddTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"bd_update_time"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span> <span class="attr">property</span>=<span class="string">"bdUpdateTime"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"bd_logic_delete"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"bdLogicDelete"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"Base_Column_List"</span>&gt;</span></span><br><span class="line">    bd_id, bd_name,bd_add_time,bd_update_time,bd_logic_delete</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询所有--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByAll"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span>/&gt;</span></span><br><span class="line">        FROM blog_demo</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在<strong>test/java/blog/demo/controller</strong>下新建<em>BlogDemoControllerTest</em>测试类(通过地址访问可省略),运行getList即可成功查询到MySQL数据库的数据。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> blog.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.MockMvc;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.ResultActions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.web.servlet.setup.MockMvcBuilders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.chen on 2020/3/20. 17:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlogDemoControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟mvc测试对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders.webAppContextSetup(<span class="keyword">this</span>.webApplicationContext).build();</span><br><span class="line">        ResultActions resultActions = <span class="keyword">this</span>.mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/getList"</span>));</span><br><span class="line">        resultActions.andReturn().getResponse().setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        resultActions.andDo(MockMvcResultHandlers.print()).andExpect(MockMvcResultMatchers.status().isOk());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>本地运行访问地址为：<a href="http://localhost:8080/blog/getList" target="_blank" rel="noopener">http://localhost:8080/blog/getList</a>  </p>
<p>在浏览器可以看到以下数据(数据是谷歌浏览器插件<a href="https://www.baidufe.com/fehelper/index/index.html" target="_blank" rel="noopener">FeHelper </a>格式化的)。</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200321034501.png" alt="返回结果图"></p>
<h6 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h6><p>详细参考源码。如有错漏请留言指出。</p>
<div class="note info">
            <p><a href="https://github.com/chenluby/blog-demo/tree/master/demo-1" target="_blank" rel="noopener">源码链接</a></p>
          </div>

]]></content>
      <categories>
        <category>案例</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>MySQL</tag>
        <tag>Mybatis</tag>
        <tag>案例</tag>
        <tag>集成</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的安装，使用</title>
    <url>/archives/43013/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Redis安装，使用</p>
          </div> 

<a id="more"></a>

<h5 id="Window端"><a href="#Window端" class="headerlink" title="Window端"></a>Window端</h5><div class="note default">
            <p><a href="https://github.com/microsoftarchive/redis/releases" target="_blank" rel="noopener">下载地址</a></p>
          </div> 

<h6 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h6><p>选择一个版本进去后选择.zip后缀的文件下载<img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/Redis-1.png" alt="Redis下载界面选择标识"></p>
<p>解压后如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/Redis-2.png" alt="解压图示"></p>
<h6 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h6><p>设置登录密码，用文本编辑器打开<em>redis.windows.conf</em>搜索<em>requirepass</em>， 在下方添加一行或打开注释#设定一个密码为123456，注意格式<em>requirepass</em>后面有一个空格。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/Redis-3.png" alt="redis设置密码"></p>
<h6 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h6><p>使用cmd定位到Redis解压的目录，例如我的目录为<em>D:\File\Blog-Demo\Redis</em>，执行下面的命令，显示如下图即启动成功。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/Redis-4.png" alt="启动服务"></p>
<blockquote>
<p>小技巧：在当前解压目录新建start.bat文件，内容为redis-server.exe redis.windows.conf，将它发送<strong>桌面快捷方式</strong>，这样不用每次启动cmd进入Redis解压目录执行这个命令了，双击打开即可。</p>
</blockquote>
<h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><p>另外开启一个cmd进入到解压目录,上面启动的cmd不能关闭，不然会访问不了服务。#后为注释内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">D:\File\Blog-Demo\Redis&gt;redis-cli.exe -h 127.0.0.1 -p 6379 #h为host，p为prot</span><br><span class="line">127.0.0.1:6379&gt; set mykey myvalue #由于设置了密码，不能直接设置key</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456 #auth 刚刚在配置的密码</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set mykey myvalue #下面显示OK即设置成功，格式:set 键 值</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get mykey #下面显示刚刚设置的value即成功，格式:get 键</span><br><span class="line">"myvalue"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/Redis-5.png" alt="使用图"></p>
<p>其它：keys pattern(查找所有符合给定模式)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; keys * #列出所有键</span><br><span class="line">1) "key1"</span><br><span class="line">2) "my1"</span><br><span class="line">3) "mykey"</span><br><span class="line">4) "key2"</span><br><span class="line">127.0.0.1:6379&gt; keys my* #列出my开头的所有键</span><br><span class="line">1) "my1"</span><br><span class="line">2) "mykey"</span><br><span class="line">127.0.0.1:6379&gt; keys ke* #列出ke开头的所有键</span><br><span class="line">1) "key1"</span><br><span class="line">2) "key2"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<p>如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/Redis-6.png" alt="keys的用法"></p>
<h5 id="Linux端"><a href="#Linux端" class="headerlink" title="Linux端"></a>Linux端</h5><h6 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h6><p>Linux版本CentOS  7.7.1908</p>
<div class="note default">
            <p><a href="https://redis.io/download" target="_blank" rel="noopener">下载地址</a></p>
          </div> 

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200319223850.png" alt="实例图"></p>
<p>使用<strong>MobaXterm</strong>终端工具上传下载好的文件，分别执行,会打印如图等信息即为成功。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen redis]# tar xzf redis-5.0.8.tar.gz  #执行后会生成redis-5.0.8文件夹</span><br><span class="line">[root@chen redis]# cd redis-5.0.8 #进入到redis-5.0.8执行make</span><br><span class="line">[root@chen redis-5.0.8]# make</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200319225558.png" alt="解压安装"></p>
<h6 id="设置密码-1"><a href="#设置密码-1" class="headerlink" title="设置密码"></a>设置密码</h6><p>编辑解压目录下的redis.conf文件，搜索搜索<em>requirepass</em>， 在下方添加一行或打开注释#设定一个密码为123456，注意格式<em>requirepass</em>后面有一个空格。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200319234753.png" alt="Linux端设置密码"></p>
<h6 id="启动服务-1"><a href="#启动服务-1" class="headerlink" title="启动服务"></a>启动服务</h6><p>进入到src目录执行(使用的是默认配置)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen redis-5.0.8]# cd src/</span><br><span class="line">[root@chen src]# ./redis-server</span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200319231847.png" alt="不带密码"></p>
<p>读取自定义配置命令(在src目录下执行执行)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;redis-server ..&#x2F;redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200319234048.png" alt="带密码"></p>
<h6 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h6><p>另外开一个终端进入到src目录下,#后为注释内容。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen src]# ./redis-cli #进入redis交互程序</span><br><span class="line">127.0.0.1:6379&gt; set my2 v2 #由于设置了密码，所以提示第三行的内容</span><br><span class="line">(error) NOAUTH Authentication required.</span><br><span class="line">127.0.0.1:6379&gt; auth 123456 #登录 auth 刚刚在redis.conf配置的密码</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set my2 v2 </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get my2</span><br><span class="line">"v2"</span><br><span class="line">127.0.0.1:6379&gt; keys my*</span><br><span class="line">1) "my2"</span><br><span class="line">127.0.0.1:6379&gt; keys *</span><br><span class="line">1) "my2"</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200319235255.png" alt="使用图"></p>
<h5 id="可视化管理"><a href="#可视化管理" class="headerlink" title="可视化管理"></a>可视化管理</h5><div class="note default">
            <p>当我们安装完Redis后1.4和2.4使用的是命令操作键值，另外也可以在Window使用RedisPlus连接Window上或Linux上的Redis进行可视化管理。以window为例操作。</p>
          </div> 

<h6 id="编辑连接"><a href="#编辑连接" class="headerlink" title="编辑连接"></a>编辑连接</h6><p>填写ip，和密码，在连接那里会显示建立的连接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200320001107.png" alt="编辑连接"></p>
<h6 id="操作说明"><a href="#操作说明" class="headerlink" title="操作说明"></a>操作说明</h6><p>在数据那一导航栏选中键后，可改键的名称，value的数据，过期时间，数据格式化，新增新的键等(如新增无DB显示可以点其它导航栏再点数据返回即可)。</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/20200320001655.png" alt="操作说明"></p>
]]></content>
      <categories>
        <category>NoSQL</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>NoSQL</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>开发辅助</title>
    <url>/archives/9086/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>开发环境必备辅助工具</p>
          </div> 

<a id="more"></a>

<p>先上图</p>
<p><img src="https://cdn.jsdelivr.net/gh/chenluby/imageCDN/upload/%E5%B7%A5%E5%85%B7%E5%9B%BE.png" alt="工具图"></p>
<h6 id="数据库可视化"><a href="#数据库可视化" class="headerlink" title="数据库可视化"></a>数据库可视化</h6><ul>
<li>Navicat Premium-主流数据库可视化管理工具，UI美观。</li>
<li>DBeaver-支持种类繁多，例如HANA,Elasticsearch ，UI略显简陋。</li>
</ul>
<h6 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h6><ul>
<li>Postman-非常受欢迎的API接口调试工具，高级功能需要付费才能使用。</li>
<li>Postwoman-免费开源、轻量级、快速且美观的API调试工具。</li>
</ul>
<h6 id="终端工具"><a href="#终端工具" class="headerlink" title="终端工具"></a>终端工具</h6><ul>
<li>MobaXterm-集万千于一身的全能型终端神器，可直接上传文件，个人觉得比Xshell，Xftp好用。</li>
<li>Git Bash-可连接服务器，代码版本管理。</li>
</ul>
<h6 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h6><ul>
<li>IntelliJ IDEA-JAVA主流编辑器，插件丰富，UI美观。</li>
<li>Visual Studio Code-免费,开源,轻量,跨平台，插件丰富。</li>
</ul>
<h6 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h6><ul>
<li><p>Xmind-实用的商业思维导图软件。</p>
</li>
<li><p>Draw.io-用于制作流程图、过程图、组织图、UML的在线图表软件。</p>
</li>
</ul>
<h6 id="截图录屏"><a href="#截图录屏" class="headerlink" title="截图录屏"></a>截图录屏</h6><ul>
<li>FastStone Capture-集图像捕捉、浏览、编辑、视频录制等功能。</li>
<li>Snipaste-快捷键F1可以将截图贴回到屏幕上。</li>
</ul>
<h6 id="文档协助"><a href="#文档协助" class="headerlink" title="文档协助"></a>文档协助</h6><ul>
<li>Typora-支持实时预览的 Markdown 文本编辑器，可导出PDF，Word，HTML等格式文件，新版本支持快捷上传至PicGo图床自动填充图片链接。</li>
<li>PicGo-图床管理插件,使用简单，支持插件。</li>
</ul>
<h6 id="远程协助"><a href="#远程协助" class="headerlink" title="远程协助"></a>远程协助</h6><ul>
<li>TeamViewer-能在任何防火墙和NAT代理的后台用于远程控制的应用程序。</li>
<li>向日葵-一款免费的集远程控制电脑,远程桌面连接,远程开机,远程管理,支持内网穿透的一体化远程控制管理工具软件。</li>
</ul>
<h6 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h6><ul>
<li>RedisPlus-Redis可视化软件开源免费，UI美观，个人觉得比Redis Desktop Manager好用。</li>
<li>aiXcoder-人工智能的软件开发工具,目前支持IntelliJ,PyCharm,Android Studio代码推荐。</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
        <category>辅助</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>辅助</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客备份</title>
    <url>/archives/38686/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>将博客源文件备份到github或gitee,方便多设备编写,本文将以github为例添加备份。</p>
          </div> 

<a id="more"></a>

<h6 id="初始化本地库"><a href="#初始化本地库" class="headerlink" title="初始化本地库"></a>初始化本地库</h6><p>先在github上创建一个远程库，建议设置为private</p>
<p>建议在备份一份源文件，避免操作造成污染!</p>
<p>因为博客根目录存在了<strong>.gitignore</strong>文件，所以在博客根目录的<strong>上级目录</strong>初始化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>如果提示下面即为成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initialized empty Git repository in xxx为你的绝对路径</span><br></pre></td></tr></table></figure>

<h6 id="编辑-gitignore"><a href="#编辑-gitignore" class="headerlink" title="编辑.gitignore"></a>编辑<strong>.gitignore</strong></h6><p>在初始化成功后编辑<strong>.gitignore</strong>内容，只提交我们的博客源文件的文件夹，例如我的文件夹名为blog</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#排除当前初始化所有文件，但不包含blog文件夹，当我们改动文件只提交这个文件上去远程库</span><br><span class="line">&#x2F;*</span><br><span class="line">!&#x2F;blog</span><br></pre></td></tr></table></figure>

<p>查看忽略规则是否正常，当我们编辑保存后执行只显示我们博客的目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">#会提示blog&#x2F;不显示其他文件夹即为正常</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        blog&#x2F;</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>

<h6 id="关联远程库"><a href="#关联远程库" class="headerlink" title="关联远程库"></a>关联远程库</h6><p>例如我的github用户名为：chenluby，远程库名为：hexo-copy</p>
<p>我需要执行的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add github &quot;git@github.com:chenluby&#x2F;hexo-copy.git&quot;</span><br></pre></td></tr></table></figure>

<p>注意add 后面的名字自己为方便记忆直接设置为github，如果为gitee远程库那就设置gitee</p>
<p>执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">#提示下面数据即为成功添加，github为你上一步add后面的名字设置的</span><br><span class="line">github  git@github.com:chenluby&#x2F;hexo-copy.git (fetch)</span><br><span class="line">github  git@github.com:chenluby&#x2F;hexo-copy.git (push)</span><br></pre></td></tr></table></figure>



<h6 id="添加submodule"><a href="#添加submodule" class="headerlink" title="添加submodule"></a>添加submodule</h6><p>如上面git status出现，下面的提示</p>
<p> <strong>modified:   blog/themes/next (<em>modified content, untracked content</em>)</strong></p>
<p>说明这是一个代码仓库。需要添加submodule</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">On branch master</span><br><span class="line">Your branch is up to date with &#39;github&#x2F;master&#39;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line">  (commit or discard the untracked or modified content in submodules)</span><br><span class="line">        modified:   blog&#x2F;themes&#x2F;next (modified content, untracked content)</span><br></pre></td></tr></table></figure>


<p>   在<strong>博客根目录</strong>执行以下命令，因为我们下载的主题是一个仓库，所以要使用:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule add xxx.git &quot;期望的本地路径&quot;</span><br></pre></td></tr></table></figure>

<p>如博客有多个主题是通过git clone下来的则需要执行。如下面用的是next主题，如忘记地址可在<strong>主题根目录</strong>下执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">#会显示下面的地址</span><br><span class="line">origin  https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next (fetch)</span><br><span class="line">origin  https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next (push)</span><br></pre></td></tr></table></figure>

<p>在上面获取的地址并在浏览器打开在右上角点击<strong>Fork</strong>，进入到自己的远程仓库复制clone地址，用于下面的操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule add git@github.com:chenluby&#x2F;hexo-theme-next.git &quot;blog&#x2F;themes&#x2F;next-fork&quot;</span><br></pre></td></tr></table></figure>

<p>如无报错会在 <strong>博客根目录上级</strong>生成一个.gitmodules文件，内容为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[submodule &quot;blog&#x2F;themes&#x2F;next-fork&quot;] </span><br><span class="line">	path &#x3D; blog&#x2F;themes&#x2F;next-fork </span><br><span class="line">	url &#x3D; git@github.com:chenluby&#x2F;hexo-theme-next.git</span><br><span class="line">#path 为你博客根目录的相对路径</span><br><span class="line">#url 为你刚设置的远程fork的clone地址</span><br></pre></td></tr></table></figure>

<p>删除旧主题源，因为一般使用git clone会产生一个.git文件夹。如果不删会影响后面多端submodule初始化(<strong>重要</strong>)</p>
<p><strong>★</strong>进入到 <strong>blog/themes/next-fork</strong>目录下依次执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git status  #下面将会提示一些暂存区的文件</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;添加next主题的submodule&quot;</span><br><span class="line">#每次改动自己的fork必须进行push，否则父仓库找不到commit id</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>至此已添加成功，注意：如有多个远程库则需要重复添加，步骤和示例一样。</p>
<p><strong>★</strong>然后先推送submodule的仓库，推送步骤和如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;添加submodule&quot;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<p>回到<strong>博客根目录的上级</strong>，和上面一样顺序执行，这是将submodule改动的内容给父仓库记录，至此备份成功!</p>
<h6 id="修改主题源"><a href="#修改主题源" class="headerlink" title="修改主题源"></a>修改主题源</h6><p>在博客根目录打开_config.yml文件，定位<em>theme:</em> 将原来的名称改xx-fork，例如上面的submodule使用的名称为next-fork，以后改动这个文件下都可以直接提交到自己远程仓库。因为我使用了数据目录，我的配置读取的是</p>
<p>/source/_data/next.xml。所以我的配置不用移植。因为更换了主题源，你所有文件也需要改动，比如用旧文件夹或文件覆盖到xx-fork等做法。(我的添加submodule后之前的图片也在xxx-fork下面了，无解，所以我只改了主题源指定)</p>
<h6 id="多端测试"><a href="#多端测试" class="headerlink" title="多端测试"></a>多端测试</h6><p>在任意目录执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:chenluby&#x2F;hexo-copy.git</span><br></pre></td></tr></table></figure>

<p>进入到博客根目录执行，即是有<em>scaffolds，source，themes</em>…那个文件夹</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo --save   #成功后会在当前目录生成node_modules文件夹</span><br><span class="line">npm install hexo-deployer-git #推送远程需要</span><br></pre></td></tr></table></figure>

<p>xxx-fork 会是空的，那么需要在根目录执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git submodule init #如果上面没意思删除旧主题源，会影响这步</span><br><span class="line">git submodule update #拉去submodule文件</span><br></pre></td></tr></table></figure>

<p>然后可以像往常一样使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p>当我们改动了xx-fork主题源下的自定义配置或新建文件时，上面的submodule说明带<strong>★</strong>的步骤不能漏。为保证每个端实时同步建议在修改后进入到主题源根目录下进去push操作。当<strong>新环境首次</strong>执行git submodule update的时候会拉取下来，这时候remote会从上面的github变为origin，而<strong>平时</strong>在两端的时候注意拉取submodule内容就可以。因为本案例使用fork方法。虽然备份仓库是private的但是fork的主题源是公开的，需要注意密钥等重要信息的备份(或者启用hexo的数据目录，这些配置会在private仓库目录下，只有你一个可以看)。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 安装JAVA环境</title>
    <url>/archives/a7061e10/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>Linux环境下部署JAVA环境</p>
          </div> 

<a id="more"></a>



<h6 id="下载并上传至Linux"><a href="#下载并上传至Linux" class="headerlink" title="下载并上传至Linux"></a>下载并上传至Linux</h6><p>工具链接：</p>
<p><a href="https://pan.baidu.com/s/114xndh_8OmgOkMHwcYDphg" target="_blank" rel="noopener">点击下载Linux</a></p>
<p>提取码: chen</p>
<p>使用MobaXterm将文件上传至Linux</p>
<p>通过MobaXterm在Linux的usr下创建java文件夹</p>
<h6 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h6><p>执行下面的命令进入到刚刚创建的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen /]# cd /usr/java</span><br></pre></td></tr></table></figure>

<h6 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h6><p>执行以下命令解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen java]# tar -zxvf jdk-8u201-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>

<h6 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h6><p>打开/etc/profile文件在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span><br></pre></td></tr></table></figure>

<p>上面添加下面内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_201 export JRE_HOME&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_201&#x2F;jre export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin:$JRE_HOME&#x2F;bin export CLASSPATH&#x3D;&#x2F;usr&#x2F;java&#x2F;jdk1.8.0_201&#x2F;lib</span><br></pre></td></tr></table></figure>

<h6 id="刷新配置"><a href="#刷新配置" class="headerlink" title="刷新配置"></a>刷新配置</h6><p>保存退出后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@chen ~]# source /etc/profile</span><br></pre></td></tr></table></figure>

<h6 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h6><p>然后在任意路径分别输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@lujian java]# javac -version</span><br><span class="line">javac 1.8.0_201</span><br><span class="line">[root@lujian java]# java -version</span><br><span class="line">java version "1.8.0_201"</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_201-b09)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.201-b09, mixed mode)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>安装</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo笔录</title>
    <url>/archives/c796d41b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note default">
            <p>hexo的常用命令</p>
          </div> 

<a id="more"></a>

<h5 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new "文件名" #新建文章</span><br><span class="line">hexo new page "pageName" #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line">hexo clean #清除编译</span><br></pre></td></tr></table></figure>

<h5 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>

<h5 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>



<h5 id="让博文列表不显示全部内容"><a href="#让博文列表不显示全部内容" class="headerlink" title="让博文列表不显示全部内容"></a>让博文列表不显示全部内容</h5><p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>
<p>答案是在合适的位置加上<!--more-->即可，例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 前言</span></span><br><span class="line"></span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line">1. 全是静态文件，访问速度快；</span><br><span class="line">2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">5. 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line">6. 等等；</span><br></pre></td></tr></table></figure>

<h5 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h5><p>配置后使用hexo new 命令会默认初始化模板，位置在scaffolds文件夹的post.md</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#文章标题</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">#日期</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">#标签,多个使用[]</span><br><span class="line">tags:</span><br><span class="line">#置顶标识</span><br><span class="line">top: false</span><br><span class="line">#分类，多级使用[]逗号分隔级别</span><br><span class="line">categories:</span><br><span class="line">#打开文章评论</span><br><span class="line">comments: true</span><br><span class="line"></span><br><span class="line">#摘要</span><br><span class="line">&#123;% note default %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125; </span><br><span class="line">#阅读全文标识</span><br><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>



<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><h6 id="保留CNAME、README-md等文件"><a href="#保留CNAME、README-md等文件" class="headerlink" title="保留CNAME、README.md等文件"></a>保留CNAME、README.md等文件</h6><ul>
<li>提交之后网页上一看，发现以前其它代码都没了，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的。</li>
<li>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。(或者在_config.yml中定位<em>skip_render</em>: 添加以下文件名，如)</li>
</ul>
<p>*</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#不渲染 README.md 这个文件</span></span><br><span class="line"><span class="attr">skip_render:</span> <span class="string">README.md</span></span><br></pre></td></tr></table></figure>



<h6 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h6><p>具体参考：<a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html" target="_blank" rel="noopener">小茗的教程</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
